extends Node

#defines all global variables, enums, and other constants

enum PauseMode{
	IN_GAME,
	CONTROLLER_DC,
	RESULT_SCREEN,
	RESTART_OR_END #this pause mode only displays restart or end	
}
enum GameModeType{
	STANDARD,
	TRAINING,
	PLAY_V_AI,
	ONLINE_HOSTING,
	ONLINE_CONNECTING_TO_HOST,
	REPLAY
}
enum LandingType{
	FALLS_PRONE,
	FALLS_PRONE_AFTER_DURATION,
	DONT_FALL_PRONE
}


enum FrameType{
	NEUTRAL,
	STARTUP,
	ACTIVE,
	RECOVERY	
}

enum Proficiency{
	BAR_COST,
	DAMAGE_INCREASE,
	ACROBATICS,
	DEFENDER,
	PSYCHIC,
	NONE
}

enum VisibilityCondition{#USED IN SFXSPRITE.GD
	NONE,
	FACING_RIGHT_ONLY,
	FACING_LEFT_ONLY	
}

enum BlockResult{
	CORRECT,
	INCORRECT,
	PERFECT,
	NO_BLOCK
}

enum AirDashType{
	FORWARD,
	BACKWARD,
	DOWNWARD
}


enum NetworkDisconnectionType{	
	TIMEOUT,
	LOST_CONNECTION, #socket error
	GRACEFUL_DISCONNECT,
	FAILED_TO_ESTABLISH_UDP_CNX # fail to establish the udp peer-to-peer session by the time game loaded
}

const MENU_NOTIFICATION_TEXT = -1 #JUST USED WHERE NetworkDisconnectionType BEING USED. SHOULD DECOUPL.E NET CODE FROM  NOTIFICATION, BUT IT WORKS


enum VictoryType{
	PLAYER1_WINS_VIA_KO,
	PLAYER2_WINS_VIA_KO,
	DRAW_VIA_KO,
	PLAYER1_WINS_VIA_TIMEOUT,
	PLAYER2_WINS_VIA_TIMEOUT,
	DRAW_VIA_TIMEOUT
}

enum HitStunType{
	BASIC,
	NO_HITSTUN,
	KNOCKBACK_ONLY,
	PROTECTION,
	ON_LINK_ONLY,
	ON_LINK_ONLY_AND_HITSTUNLESS
}
	
	
enum OnOpponentStatus{
	NOT_AGAINST_WALL,
	AGAINST_RIGHT_WALL,
	AGAINST_LEFT_WALL
}


enum DirectionalInput{
	UP,#0
	FORWARD_UP,#1
	FORWARD,#2
	FORWARD_DOWN,#3
	DOWN,#4
	BACKWARD_DOWN,#5
	BACKWARD,#6
	BACKWARD_UP,	#7,
	NEUTRAL
}

enum ProficiencyClass{
	MAJOR_ADVANTAGE,
	MAJOR_DISADVANTAGE,
	MINOR	
}

const INPUT_BUFFER_SIZE =7
const GAME_VERSION_STRING = "Field Trip Fighters \nversion 0.53.1 - Godot v3.1.2"

const PLAYER_NAME_FILE = "user://pnames-controls.ser"

const DEMO_MODE_FLAG = false

const PROFICIENCY_NO_MINOR_CLASS=-1
const PROFICIENCY_MAJOR_CLASS_GENERALIST=0
const PROFICIENCY_MAJOR_CLASS_ACROBATICS=1
const PROFICIENCY_MAJOR_CLASS_DEFENDER=2
const PROFICIENCY_MAJOR_CLASS_ABILITY_CANCEL=3
const PROFICIENCY_MAJOR_CLASS_OFFESIVE_MASTERY=4
const PROFICIENCY_MAJOR_CLASS_PSYCHIC=5 
const PROFICIENCY_MAJOR_CLASS_NO_JOHNS=6

#same sas GLOBALS
enum ProficiencyPropertyID{
	GOOD_CAN_LOW_BLOCK_IN_AIR,
	GOOD_REGENERATE_GUARD_IN_AIR,
	GOOD_GAIN_JUMP_FROM_ABILITY_CANCEL,
	GOOD_RECOVER_AIR_DASH_ON_BLOCK,
	BAD_LOSE_AIR_DASH_AND_JUMP_ON_BLOCK,
	GOOD_RECOVER_AIR_DASH_ON_HIT,
	GOOD_RECOVER_AIR_DASH_AND_JUMP_ON_TECH,
	GOOD_PERFECT_BLOCK_ABILITY_BAR_REGEN,
	GOOD_SMALL_BAR_GAIN_BY_GRABBING_AUTORIPOSTER,
	GOOD_MEDIUM_BAR_GAIN_BY_GRABBING_AUTORIPOSTER,
	GOOD_LARGE_BAR_GAIN_BY_GRABBING_AUTORIPOSTER,
	BAD_GRAB_WHIF_PROVOKES_COOLDOWN,
	BAD_SMALL_AIR_ANIMATION_AND_LANDING_LAG_CANCEL_COST_INCREASE,
	BAD_MEDIUM_AIR_ANIMATION_AND_LANDING_LAG_CANCEL_COST_INCREASE,
	BAD_LARGE_AIR_ANIMATION_AND_LANDING_LAG_CANCEL_COST_INCREASE,
	BAD_ONLY_1_JUMP,
	BAD_NO_AIR_DASHING,
	BAD_DONT_RECOVER_AIR_DASH_FROM_JUMPING,
	BAD_CANT_DI_TECH,
	BAD_TAKE_TRIPLE_DAMAGE_IN_STUN,
	BAD_CANT_GRAB_WHILE_IN_AIR,
	BAD_ABILITY_CANCELING_NO_RESET_STALE_MOVES,
	#GAURD BREAK BAR GAIN
	BAD_SMALL_DECREASE_TO_BAR_GAIN_FROM_GUARD_BREAK,
	BAD_MEDIUM_DECREASE_TO_BAR_GAIN_FROM_GUARD_BREAK,
	BAD_LARGE_DECREASE_TO_BAR_GAIN_FROM_GUARD_BREAK,
	GOOD_SMALL_INCREASE_TO_BAR_GAIN_FROM_GUARD_BREAK,
	GOOD_MEDIUM_INCREASE_TO_BAR_GAIN_FROM_GUARD_BREAK,
	GOOD_LARGE_INCREASE_TO_BAR_GAIN_FROM_GUARD_BREAK,
	#GAURD BREAK BAR FEED
	BAD_SMALL_INCREASE_TO_BAR_FEED_FROM_GUARD_BREAK,
	BAD_MEDIUM_INCCREASE_TO_BAR_FEED_FROM_GUARD_BREAK,
	BAD_LARGE_INCCREASE_TO_BAR_FEED_FROM_GUARD_BREAK,
	GOOD_SMALL_DECREASE_TO_BAR_FEED_FROM_GUARD_BREAK,
	GOOD_MEDIUM_DECREASE_TO_BAR_FEED_FROM_GUARD_BREAK,
	GOOD_LARGE_DECREASE_TO_BAR_FEED_FROM_GUARD_BREAK,
	#AUTO RIPOST COST
	BAD_SMALL_INCREASE_TO_AUTO_RIPOSTE_COST,
	BAD_MEDIUM_INCREASE_TO_AUTO_RIPOSTE_COST,
	BAD_LARGE_INCREASE_TO_AUTO_RIPOSTE_COST,
	GOOD_SMALL_DECREASE_TO_AUTO_RIPOSTE_COST,
	GOOD_MEDIUM_DECREASE_TO_AUTO_RIPOSTE_COST,
	GOOD_LARGE_DECREASE_TO_AUTO_RIPOSTE_COST,
	#AUTO ABILITY CANCEL COST
	BAD_SMALL_INCREASE_TO_AUTO_ABILITY_CANCEL_COST,
	BAD_MEDIUM_INCREASE_TO_AUTO_ABILITY_CANCEL_COST,
	BAD_LARGE_INCREASE_TO_AUTO_ABILITY_CANCEL_COST,
	GOOD_SMALL_DECREASE_TO_AUTO_ABILITY_CANCEL_COST,
	GOOD_MEDIUM_DECREASE_TO_AUTO_ABILITY_CANCEL_COST,
	GOOD_LARGE_DECREASE_TO_AUTO_ABILITY_CANCEL_COST,
	#GUARD DAMAGE DEALT
	BAD_SMALL_DECREASE_TO_GUARD_DAMAGE_DEALT,
	BAD_MEDIUM_DECREASE_TO_GUARD_DAMAGE_DEALT,
	BAD_LARGE_DECREASE_TO_GUARD_DAMAGE_DEALT,
	GOOD_SMALL_INCREASE_TO_GUARD_DAMAGE_DEALT,
	GOOD_MEDIUM_INCREASE_TO_GUARD_DAMAGE_DEALT,
	GOOD_LARGE_INCREASE_TO_GUARD_DAMAGE_DEALT,
	#GUARD DAMAGE DEALT TO AIR OPPONENT
	BAD_SMALL_DECREASE_TO_GUARD_DAMAGE_DEALT_VS_AIR_OPPONENT,
	BAD_MEDIUM_DECREASE_TO_GUARD_DAMAGE_DEALT_VS_AIR_OPPONENT,
	BAD_LARGE_DECREASE_TO_GUARD_DAMAGE_DEALT_VS_AIR_OPPONENT,
	GOOD_SMALL_INCREASE_TO_GUARD_DAMAGE_DEALT_VS_AIR_OPPONENT,
	GOOD_MEDIUM_INCREASE_TO_GUARD_DAMAGE_DEALT_VS_AIR_OPPONENT,
	GOOD_LARGE_INCREASE_TO_GUARD_DAMAGE_DEALT_VS_AIR_OPPONENT,
	#CORRECT_BLOCK GUARD DAMAGE DEALT
	BAD_SMALL_DECREASE_TO_CORRECT_BLOCK_GUARD_DAMAGE_DEALT,
	BAD_MEDIUM_DECREASE_TO_CORRECT_BLOCK_GUARD_DAMAGE_DEALT,
	BAD_LARGE_DECREASE_TO_CORRECT_BLOCK_GUARD_DAMAGE_DEALT,
	GOOD_SMALL_INCREASE_TO_CORRECT_BLOCK_GUARD_DAMAGE_DEALT,
	GOOD_MEDIUM_INCREASE_TO_CORRECT_BLOCK_GUARD_DAMAGE_DEALT,
	GOOD_LARGE_INCREASE_TO_CORRECT_BLOCK_GUARD_DAMAGE_DEALT,
	#INCORRECT_BLOCK GUARD DAMAGE DEALT
	BAD_SMALL_DECREASE_TO_INCORRECT_BLOCK_GUARD_DAMAGE_DEALT,
	BAD_MEDIUM_DECREASE_TO_INCORRECT_BLOCK_GUARD_DAMAGE_DEALT,
	BAD_LARGE_DECREASE_TO_INCORRECT_BLOCK_GUARD_DAMAGE_DEALT,
	GOOD_SMALL_INCREASE_TO_INCORRECT_BLOCK_GUARD_DAMAGE_DEALT,
	GOOD_MEDIUM_INCREASE_TO_INCORRECT_BLOCK_GUARD_DAMAGE_DEALT,
	GOOD_LARGE_INCREASE_TO_INCORRECT_BLOCK_GUARD_DAMAGE_DEALT,
	#GUARD DAMAGE TAKEN
	BAD_SMALL_INCREASE_TO_GUARD_DAMAGE_TAKEN,
	BAD_MEDIUM_INCREASE_TO_GUARD_DAMAGE_TAKEN,
	BAD_LARGE_INCREASE_TO_GUARD_DAMAGE_TAKEN,
	GOOD_SMALL_DECREASE_TO_GUARD_DAMAGE_TAKEN,
	GOOD_MEDIUM_DECREASE_TO_GUARD_DAMAGE_TAKEN,
	GOOD_LARGE_DECREASE_TO_GUARD_DAMAGE_TAKEN,
	#GUARD DAMAGE TAKEN IN AIR
	BAD_SMALL_INCREASE_TO_GUARD_DAMAGE_TAKEN_IN_AIR,
	BAD_MEDIUM_INCREASE_TO_GUARD_DAMAGE_TAKEN_IN_AIR,
	BAD_LARGE_INCREASE_TO_GUARD_DAMAGE_TAKEN_IN_AIR,
	GOOD_SMALL_DECREASE_TO_GUARD_DAMAGE_TAKEN_IN_AIR,
	GOOD_MEDIUM_DECREASE_TO_GUARD_DAMAGE_TAKEN_IN_AIR,
	GOOD_LARGE_DECREASE_TO_GUARD_DAMAGE_TAKEN_IN_AIR,
	#CORRECT_BLOCK GUARD DAMAGE TAKEN
	BAD_SMALL_INCREASE_TO_CORRECT_BLOCK_GUARD_DAMAGE_TAKEN,
	BAD_MEDIUM_INCREASE_TO_CORRECT_BLOCK_GUARD_DAMAGE_TAKEN,
	BAD_LARGE_INCREASE_TO_CORRECT_BLOCK_GUARD_DAMAGE_TAKEN,
	GOOD_SMALL_DECREASE_TO_CORRECT_BLOCK_GUARD_DAMAGE_TAKEN,
	GOOD_MEDIUM_DECREASE_TO_CORRECT_BLOCK_GUARD_DAMAGE_TAKEN,
	GOOD_LARGE_DECREASE_TO_CORRECT_BLOCK_GUARD_DAMAGE_TAKEN,
	#INCORRECT_BLOCK GUARD DAMAGE TAKEN
	BAD_SMALL_INCREASE_TO_INCORRECT_BLOCK_GUARD_DAMAGE_TAKEN,
	BAD_MEDIUM_INCREASE_TO_INCORRECT_BLOCK_GUARD_DAMAGE_TAKEN,
	BAD_LARGE_INCREASE_TO_INCORRECT_BLOCK_GUARD_DAMAGE_TAKEN,
	GOOD_SMALL_DECREASE_TO_INCORRECT_BLOCK_GUARD_DAMAGE_TAKEN,
	GOOD_MEDIUM_DECREASE_TO_INCORRECT_BLOCK_GUARD_DAMAGE_TAKEN,
	GOOD_LARGE_DECREASE_TO_INCORRECT_BLOCK_GUARD_DAMAGE_TAKEN,
	#BLOCK CHIP DAMAGE DEALT
	BAD_SMALL_DECREASE_TO_BLOCK_CHIP_DAMAGE_DEALT,
	BAD_MEDIUM_DECREASE_TO_BLOCK_CHIP_DAMAGE_DEALT,
	BAD_LARGE_DECREASE_TO_BLOCK_CHIP_DAMAGE_DEALT,
	GOOD_SMALL_INCREASE_TO_BLOCK_CHIP_DAMAGE_DEALT,
	GOOD_MEDIUM_INCREASE_TO_BLOCK_CHIP_DAMAGE_DEALT,
	GOOD_LARGE_INCREASE_TO_BLOCK_CHIP_DAMAGE_DEALT,
	#GUARD REGEN RATE
	BAD_SMALL_DECREASE_TO_GUARD_REGEN_RATE,
	BAD_MEDIUM_DECREASE_TO_GUARD_REGEN_RATE,
	BAD_LARGE_DECREASE_TO_GUARD_REGEN_RATE,
	GOOD_SMALL_INCREASE_TO_GUARD_REGEN_RATE,
	GOOD_MEDIUM_INCREASE_TO_GUARD_REGEN_RATE,
	GOOD_LARGE_INCREASE_TO_GUARD_REGEN_RATE,
	#MAGIC SEREIS BAR GAIN
	BAD_SMALL_DECREASE_TO_BAR_GAIN_FROM_MAGIC_SERIES,
	BAD_MEDIUM_DECREASE_TO_BAR_GAIN_FROM_MAGIC_SERIES,
	BAD_LARGE_DECREASE_TO_BAR_GAIN_FROM_MAGIC_SERIES,
	GOOD_SMALL_INCREASE_TO_BAR_GAIN_FROM_MAGIC_SERIES,
	GOOD_MEDIUM_INCREASE_TO_BAR_GAIN_FROM_MAGIC_SERIES,
	GOOD_LARGE_INCREASE_TO_BAR_GAIN_FROM_MAGIC_SERIES,
	#RIPOST COST
	BAD_SMALL_INCREASE_TO_RIPOST_COST,
	BAD_MEDIUM_INCREASE_TO_RIPOST_COST,
	BAD_LARGE_INCREASE_TO_RIPOST_COST,
	GOOD_SMALL_DECREASE_TO_RIPOST_COST,
	GOOD_MEDIUM_DECREASE_TO_RIPOST_COST,
	GOOD_LARGE_DECREASE_TO_RIPOST_COST,
	#counter RIPOST COST
	BAD_SMALL_INCREASE_TO_COUNTERRIPOST_COST,
	BAD_MEDIUM_INCREASE_TO_COUNTERRIPOST_COST,
	BAD_LARGE_INCREASE_TO_COUNTERRIPOST_COST,
	GOOD_SMALL_DECREASE_TO_COUNTERRIPOST_COST,
	GOOD_MEDIUM_DECREASE_TO_COUNTERRIPOST_COST,
	GOOD_LARGE_DECREASE_TO_COUNTERRIPOST_COST,
	#TECH COST
	BAD_SMALL_INCREASE_TO_TECH_COST,
	BAD_MEDIUM_INCREASE_TO_TECH_COST,
	BAD_LARGE_INCREASE_TO_TECH_COST,
	GOOD_SMALL_DECREASE_TO_TECH_COST,
	GOOD_MEDIUM_DECREASE_TO_TECH_COST,
	GOOD_LARGE_DECREASE_TO_TECH_COST,
	#PUSH BLOCK COST
	BAD_SMALL_INCREASE_TO_PUSH_BLOCK_COST,
	BAD_MEDIUM_INCREASE_TO_PUSH_BLOCK_COST,
	BAD_LARGE_INCREASE_TO_PUSH_BLOCK_COST,
	GOOD_SMALL_DECREASE_TO_PUSH_BLOCK_COST,
	GOOD_MEDIUM_DECREASE_TO_PUSH_BLOCK_COST,
	GOOD_LARGE_DECREASE_TO_PUSH_BLOCK_COST,
	#ABILITY CANCELING DMG PRORATION
	BAD_SMALL_DECREASE_TO_ABILITY_CANCEL_DMG_PRORATION_SET_BACK,
	BAD_MEDIUM_DECREASE_TO_ABILITY_CANCEL_DMG_PRORATION_SET_BACK,
	BAD_LARGE_DECREASE_TO_ABILITY_CANCEL_DMG_PRORATION_SET_BACK,
	GOOD_SMALL_INCREASE_TO_ABILITY_CANCEL_DMG_PRORATION_SET_BACK,
	GOOD_MEDIUM_INCREASE_TO_ABILITY_CANCEL_DMG_PRORATION_SET_BACK,
	GOOD_LARGE_INCREASE_TO_ABILITY_CANCEL_DMG_PRORATION_SET_BACK,
	#ABILITY CANCELING COST
	BAD_SMALL_INCREASE_TO_ABILITY_CANCEL_COST,
	BAD_MEDIUM_INCREASE_TO_ABILITY_CANCEL_COST,
	BAD_LARGE_INCREASE_TO_ABILITY_CANCEL_COST,
	GOOD_SMALL_DECREASE_TO_ABILITY_CANCEL_COST,
	GOOD_MEDIUM_DECREASE_TO_ABILITY_CANCEL_COST,
	GOOD_LARGE_DECREASE_TO_ABILITY_CANCEL_COST,
	#grab cooldown
	BAD_SMALL_INCREASE_TO_GRAB_COOLDOWN,
	BAD_MEDIUM_INCREASE_TO_GRAB_COOLDOWN,
	BAD_LARGE_INCREASE_TO_GRAB_COOLDOWN,
	GOOD_SMALL_DECREASE_TO_GRAB_COOLDOWN,
	GOOD_MEDIUM_DECREASE_TO_GRAB_COOLDOWN,
	GOOD_LARGE_DECREASE_TO_GRAB_COOLDOWN,
	#MAGIC SEREIS BAR GAIN in the air
	BAD_SMALL_DECREASE_TO_BAR_GAIN_FROM_MAGIC_SERIES_IN_THE_AIR,
	BAD_MEDIUM_DECREASE_TO_BAR_GAIN_FROM_MAGIC_SERIES_IN_THE_AIR,
	BAD_LARGE_DECREASE_TO_BAR_GAIN_FROM_MAGIC_SERIES_IN_THE_AIR,
	GOOD_SMALL_INCREASE_TO_BAR_GAIN_FROM_MAGIC_SERIES_IN_THE_AIR,
	GOOD_MEDIUM_INCREASE_TO_BAR_GAIN_FROM_MAGIC_SERIES_IN_THE_AIR,
	GOOD_LARGE_INCREASE_TO_BAR_GAIN_FROM_MAGIC_SERIES_IN_THE_AIR,
	#auto ripost
	BAD_SMALL_BAR_COST_FROM_MISSING_AUTORIPOSTE,
	BAD_MEDIUM_BAR_COST_FROM_MISSING_AUTORIPOSTE,
	BAD_LARGE_BAR_COST_FROM_MISSING_AUTORIPOSTE,
	#GRAB ABILITY CANCEL COOLDOWN
	GOOD_GRAB_COOLDOWN_REFRESHED_ON_AUTO_ABILITY_CANCEL,
	GOOD_GRAB_COOLDOWN_REFRESHED_ON_ABILITY_CANCEL,
	#BLOCK CHIP DAMAGE taken
	BAD_SMALL_DECREASE_TO_BLOCK_CHIP_DAMAGE_TAKEN,
	BAD_MEDIUM_DECREASE_TO_BLOCK_CHIP_DAMAGE_TAKEN,
	BAD_LARGE_DECREASE_TO_BLOCK_CHIP_DAMAGE_TAKEN,
	GOOD_SMALL_INCREASE_TO_BLOCK_CHIP_DAMAGE_TAKEN,
	GOOD_MEDIUM_INCREASE_TO_BLOCK_CHIP_DAMAGE_TAKEN,
	GOOD_LARGE_INCREASE_TO_BLOCK_CHIP_DAMAGE_TAKEN,
	BAD_SMALL_INCREASE_COOLDOWN_TO_AIR_GRAB,
	BAD_MEDIUM_INCREASE_COOLDOWN_TO_AIR_GRAB,
	BAD_LARGE_INCREASE_COOLDOWN_TO_AIR_GRAB,
	BAD_PREVENT_GROUND_DASHING,
	BAD_PREVENT_BLOCKING_GROUND_ATTACKS_IN_AIR,
	BAD_PREVENT_INCORRECT_BLOCKING,
	GOOD_SMALL_SETBACK_INCREASE_TO_SPAM_HISTUN_ON_ABILITY_CANCEL,
	BAD_SMALL_SETBACK_DECREASE_TO_SPAM_HISTUN_ON_ABILITY_CANCEL	,
	GOOD_YOU_CAN_DASH_OR_JUMP_OUT_OF_PUSHBLOCK,
	GOOD_PERFECT_BLOCK_REGENS_GUARD,
	BAD_LOSE_TECH_INVINCIBILITY,
	BAD_ENOURMOUS_BLOCK_CHIP_DAMAGE,
	GOOD_COUNTER_RIPOST_STEAL_ABILITY_BAR,
	BAD_CANT_AUTORIPOSTE,
	BAD_GAIN_NO_BAR_FROM_MAGIC_SERIES,
	GOOD_GAIN_ADDITIONAL_GRAB_CHARGE,
	BAD_CANT_GRAB,
	BAD_50_PRECENT_INCORRECT_BLOCK_GUARD_DMG_REDUCTION,
	BAD_ABILITY_CANCEL_ON_HIT_ONLY,
	BAD_DONT_TURN_AROUND_IN_AIR,
	BAD_CANT_PUSH_BLOCK
}


const ABILITY_BAR_TO_MAX_HEALTH_RATIO=0.55 #to fill abilikty bar to max, have to be hit 55% of total health
##BAR WILL FILL about less than TWICE FROM 0 TO DEATH from RAW hp to ability bar. THE RATIO TESTED WITH LONGEST WAS 2500 HP AND 0.4 ABILITTY GAIN (full bar is 1000 units = 2500 * 0.4)

const TECH_CEILING_IX = 0
const TECH_FLOOR_IX = 1
const TECH_WALL_IX = 2


const TRAINING_MODE_NPC_BEHAVIOR_SPAM = "Spam"
const TRAINING_MODE_NPC_BEHAVIOR_2ND_CONTROLLER = "Control (2nd Controller)"
const TRAINING_MODE_NPC_BEHAVIOR_MAIN_CONTROLLER = "Control (Main Controller)"
const TRAINING_MODE_NPC_BEHAVIOR_MIRROR_PLAYER_COMMAND = "Mirror Player Command"
const TRAINING_MODE_NPC_BEHAVIOR_MIRROR_PLAYER_INPUT = "Mirror Player Input"
const TRAINING_MODE_NPC_BEHAVIOR_CPU = "CPU"

#ACTIVE FRAME AUTO ABILITYCANCEL
const TRAINING_MODE_AFAAC_DISABLED = "Disabled"
const TRAINING_MODE_AFAAC_ENABLED = "Enabled"
const TRAINING_MODE_AFAAC_ON_HIT_ONLY = "On-hit Only"


const TRAINING_MODE_GUARD_NO_BLOCK = "No Block"
const TRAINING_MODE_GUARD_BLOCK_HIGH = "Block High"
const TRAINING_MODE_GUARD_BLOCK_LOW = "Block Low"
const TRAINING_MODE_GUARD_BLOCK_EVERYTHING = "Block All"

const TRAINING_MODE_GUARD_BEHAVIOR_NOW = "Block Immediatly"
const TRAINING_MODE_GUARD_BEHAVIOR_RANDOM = "Random Block"
const TRAINING_MODE_GUARD_BEHAVIOR_AFTER_FIRST_HIT = "Block After First Hit"

const MVM_ANIMATION_LOWEST_PRIORITY =0
const MVM_ANIMATION_HIGHEST_PRIORITY =10


const GUARD_DAMAGE_CLASS_AVERAGE=0
const GUARD_DAMAGE_CLASS_LOW=1
const GUARD_DAMAGE_CLASS_HEAVY=2

const PRORATION_DAMAGE_CLASS_LIGHT=0
const PRORATION_DAMAGE_CLASS_MEDIUM=1
const PRORATION_DAMAGE_CLASS_HEAVY=2

const TECH_EXCEPTION_NONE=0
const TECH_EXCEPTION_WALL=1
const TECH_EXCEPTION_FLOOR=2
const TECH_EXCEPTION_CEILING=4

const BOUNCE_RC_MAX_BOUNCES_EXCEEDED = 0
const BOUNCE_RC_MOMENTUM_CAME_TO_HALT = 1
const BOUNCE_RC_EXTERNALLY_STOPPED = 2

#SAME DEFINITION AS RES://eNVIRONEMTNsATETDOBY2D.GD, BUT DIF NAMES
const COLLISION_TYPE_WALL = 0
const COLLISION_TYPE_CEILING = 1
const COLLISION_TYPE_FLOOR = 2
const COLLISION_TYPE_PLATFORM = 3

const MATCH_DATA_COLLECTION_OUTPUT_DIR= "user://match-data"
const MAXIMUM_DMG_FOCUS_BAR_AMOUNT = 5

const DISPLAY_HP_LABEL_THRESHOLD= 100 #display the hp amount on the bar when under 100 hp

const PLAYER1_CREW_BATTLE_WINNER_ID = 0
const PLAYER2_CREW_BATTLE_WINNER_ID = 1

const CPU_NAME = "CPU"

const DEFAULT_ABILITY_REGEN_SCALE = 1.15

#the default global speed mofifier
const DEFAULT_GLOBAL_SPEED_MOD = 1
#groups
const GLOBAL_SPEED_MOD_GROUP = "global_speed_mod"
const GLOBAL_PAUSE_GROUP="global_pause_group"
const GLOBAL_SPEED_MOD_SETTER_FUNC = "setGlobalSpeedMod"
const GLOBAL_PAUSE_GROUP_ON_PAUSE_FUNC="_on_pause"
const GLOBAL_PAUSE_GROUP_ON_UNPAUSE_FUNC="_on_unpause"
const GLOBAL_HITFREEZE_GROUP = "global_hitfreeze_group"
const GLOBAL_FORCE_FIXED_DELTA_GROUP = "global_fixed_delta_group"
const GLOBAL_TIMER_FORCE_TIMEOUT_GROUP = "global_timer_force_timeout_group"
const GLOBAL_TIMER_FORCE_TIMEOUT_FUNC = "forceTimeout"

const DEBUGGING_FOLLOW_MVM = true

#defined in active-collision-areas.gd
const COLLISION_AREA_TYPE_HITBOX_IX = 0
const COLLISION_AREA_TYPE_HURTBOX_IX = 1
const COLLISION_AREA_TYPE_SELFONLY_HITBOX_IX = 2
const COLLISION_AREA_TYPE_SELFONLY_HURTBOX_IX = 3
const COLLISION_AREA_TYPE_PROXIMITY_GUARD_AREA_IX = 4

const MAX_NUM_COLLISION_AREAS_PER_SPRITE_FRAME_MAP={COLLISION_AREA_TYPE_HITBOX_IX:3,
COLLISION_AREA_TYPE_HURTBOX_IX:3,
COLLISION_AREA_TYPE_SELFONLY_HITBOX_IX:1,
COLLISION_AREA_TYPE_SELFONLY_HURTBOX_IX:1,
COLLISION_AREA_TYPE_PROXIMITY_GUARD_AREA_IX:8}

#const MAX_NUM_COLLISION_AREAS_PER_SPRITE_FRAME = 5 # no more than 8 hitbox areas and 8 hurtbox areas, 8 selfonly hit and hurtox
const MAX_NUM_COLLISION_BOXES_PER_COLLISION_AREA = 16

const KEN_HERO_NAME = "ken"
const GLOVE_HERO_NAME = "glove"
const BELT_HERO_NAME = "belt"
const MICROPHONE_HERO_NAME = "microphone"
const HAT_HERO_NAME = "hat"
const WHISTLE_HERO_NAME = "whistle"

const THEATER_SCENE_PATH="res://stages/theater.tscn"
const ART_MUSEUM_SCENE_PATH="res://stages/art-museum.tscn"
const FARM_SCENE_PATH= "res://stages/farm.tscn"
const HAUNTED_MANSION_SCENE_PATH= "res://stages/haunted-mansion.tscn"
const KAYAKING_SCENE_PATH= "res://stages/kayaking.tscn"
const MOUNTAIN_CLIMBING_SCENE_PATH= "res://stages/mountain-climbing.tscn"
const OBSERVATORY_SCENE_PATH= "res://stages/observatory.tscn"
const RADIO_TOWER_SCENE_PATH= "res://stages/radio-tower.tscn"
const SNOW_CARNAVAL_SCENE_PATH= "res://stages/snow-carnaval.tscn"

const DEBUG = true


const BELT_NOTIFICATION_TEXT_ANGRY = "Angry!"
const MIC_NOTIFICATION_TEXT_OPERA = "Opera"
const MIC_NOTIFICATION_TEXT_RAP = "Rap"
const GLOVE_NOTIFICATION_TEXT_ACTIVE_BALL = "Active\nBall"
const GLOVE_NOTIFICATION_TEXT_BROKEN_STRING = "Broken\nString"

const HAT_BALL_CAP_ON_BATTLEFIELD_IN_FRONT_OF_HAT_IX=0
const HAT_BALL_CAP_ON_BATTLEFIELD_BEHIND_HAT_IX=1
const HAT_BALL_CAP_ON_BATTLEFIELD_ABOVE_OR_BELOW_HAT_IX=2
const HAT_BALL_CAP_OFF_BATTLEFIELD_IX=3

const WHISTLE_NOT_ENOUGH_BONES_IX=-1 #when updating bone hud with bone count, -1 means tried to do action with no bones

const HITSTUN_DURATION_TYPE_BASIC = 0
const HITSTUN_DURATION_TYPE_ADD = 1
const HITSTUN_DURATION_TYPE_MEATY = 2

const FRAMES_PER_SECOND = 60

const MELEE_IX = 0
const SPECIAL_IX = 1
const TOOL_IX = 2
const OTHER_IX = 3
const CLASH_IX = 4
#const DUAL_MELEE_TOOL_IX = 5 #a melee that supports reverse beat so could end and count as tool
#const DUAL_TOOL_MELEE_IX =6  #a TOOL that supports reverse beat so could START with this and count as melee

const SUBCLASS_BASIC = 0
const SUBCLASS_HYPER_ARMOR = 1
const SUBCLASS_HEAVY_ARMOR = 2
const SUBCLASS_INVINCIBILITY = 3
const SUBCLASS_SUPER_ARMOR = 4

const DEFAULT_DAMAGE_GAUGE_AMOUNT = 1
const DEFAULT_FOCUS_AMOUNT = 1

const PLAYER1_INPUT_DEVICE_ID = "P1"
const PLAYER2_INPUT_DEVICE_ID = "P2"

const PLAYER_INPUT_RAW_DEVICE_ID_MAP = {PLAYER1_INPUT_DEVICE_ID:0,PLAYER2_INPUT_DEVICE_ID:1}
const PLAYER_INPUT_RAW_DEVICE_ID_REVERSE_MAP = {0:PLAYER1_INPUT_DEVICE_ID,1:PLAYER2_INPUT_DEVICE_ID}

#teching constants
const RC_SUCCESFUL_TECH_WINDOW_START = 0
const RC_FAILED_FROM_LOCKED_WINDOW = 1
const RC_ALREADY_STARTED_TECH_WINDOW = 2

const TYPE_GROUND_TECH_IN_PLACE = 0
const TYPE_GROUND_TECH_BOUNCE_UP = 1
const TYPE_GROUND_TECH_ROLL_BACKWARD = 2
const TYPE_GROUND_TECH_ROLL_FORWARD = 3

const TYPE_CEILING_TECH_IN_PLACE = 4
const TYPE_CEILING_TECH_BOUNCE_DOWN = 5
const TYPE_CEILING_TECH_BOUNCE_FORWARD = 6
const TYPE_CEILING_TECH_BOUNCE_BACK = 7

const TYPE_WALL_TECH_IN_PLACE = 8
const TYPE_WALL_TECH_BOUNCE_UP = 9
const TYPE_WALL_TECH_BOUNCE_DOWN = 10
const TYPE_WALL_TECH_BOUNCE_AWAY= 11

#this is used for hitfreeze purposes. The player controller that created the 
#projectil should be in charge of setting this
const RIPOST_REACTION_WINDOW = 2

#var complex_mvm_ref = preload("res://ComplexMovement.tscn").instance()

const MILLISECONDS_PER_SECOND = 1000
const FIXED_FRAME_DURATION_IN_SECONDS = 0.016667 # (SECONDS)1/60  BUT MAKING IT hardcoded so should be same accross multiple machines

const FIXED_FRAME_DURATION_IN_MILLISECONDS =FIXED_FRAME_DURATION_IN_SECONDS*MILLISECONDS_PER_SECOND


#const SECONDS_PER_FRAME = 1.0/60.0
const SECONDS_PER_FRAME = FIXED_FRAME_DURATION_IN_SECONDS #WERE fixing the delta value and seconds per frame in time calculations to force determinism

const DEFAULT_FIXED_DELTA_FLAG = true

const MISSING_BAR_ICON_DURATION = 1 #1 second

const COUNTER_RIPOST_OVERRIDES_RIPOST_WINDOW = SECONDS_PER_FRAME * 6 #6 frame window to interrupt ripost with coutner ripsot

#hitbox and hurt box collision layers and masks for players
const PLAYER_1_HITBOX_LAYER_BIT =  12
const PLAYER_1_HURTBOX_LAYER_BIT = 13
const PLAYER_1_SELF_ONLY_HITBOX_LAYER_BIT = 16
const PLAYER_1_SELF_ONLY_HURTBOX_LAYER_BIT = 17
const PLAYER_2_HITBOX_LAYER_BIT = 14
const PLAYER_2_HURTBOX_LAYER_BIT = 15
const PLAYER_2_SELF_ONLY_HITBOX_LAYER_BIT = 18
const PLAYER_2_SELF_ONLY_HURTBOX_LAYER_BIT = 19



#body box collision masks and layers
const PLAYER1_STAGE_COLLISION_LAYER_BIT = 0
#const PLAYER2_STAGE_COLLISION_LAYER_BIT = 1
const PLAYER2_STAGE_COLLISION_LAYER_BIT = 0
#const PLAYER1_FALSE_WALL_STAGE_COLLISION_LAYER_BIT = 2
#const PLAYER2_FALSE_WALL_STAGE_COLLISION_LAYER_BIT = 3
const PLAYER1_FALSE_WALL_STAGE_COLLISION_LAYER_BIT = 1
const PLAYER2_FALSE_WALL_STAGE_COLLISION_LAYER_BIT = 1
#const PLAYER1_FALSE_CEILING_STAGE_COLLISION_LAYER_BIT =4
#const PLAYER2_FALSE_CEILING_STAGE_COLLISION_LAYER_BIT = 5
const PLAYER1_FALSE_CEILING_STAGE_COLLISION_LAYER_BIT =2
const PLAYER2_FALSE_CEILING_STAGE_COLLISION_LAYER_BIT = 2

#body box collision masks and layers
const PLAYER1_STAGE_FLOOR_COLLISION_LAYER_BIT = 3#both 20 cause layers end I think at 20
const PLAYER2_STAGE_FLOOR_COLLISION_LAYER_BIT = 3 #both 20 cause layers end I think at 20

const PLAYER1_PUSHABLE_BODYBOX_LAYER_BIT =6
const PLAYER2_PUSHABLE_BODYBOX_LAYER_BIT = 7
const PLAYER1_PLATFORM_LAYER_BIT = 8
const PLAYER2_PLATFORM_LAYER_BIT = 9
const PLAYER1_BODYBOX_LAYER_BIT =10
const PLAYER2_BODYBOX_LAYER_BIT =11

#THE LIGHTING masks for the different players
const PLAYER_1_STANDARD_LIGHTING_EFFECTS_MASK_BIT = 7
const PLAYER_1_ABILITY_CANCEL_LIGHTING_EFFECTS_MASK_BIT = 8
const PLAYER_2_STANDARD_LIGHTING_EFFECTS_MASK_BIT = 9
const PLAYER_2_ABILITY_CANCEL_LIGHTING_EFFECTS_MASK_BIT = 10


const DAMAGE_PER_STAR_MOD = 0.2 # a star is 20% more damage
const MAX_NUM_DMG_STARS = 5

const PROJECTILE_SPRITE_ANIME_ID_PRORATION_TRACKING_OFFSET=2048 #ID to add to sprite anime id of projectiles when resolving proration

const MAX_INT = 9223372036854775807
const FRAME_SECOND_EPSILON =  0.00001 


const DP_FILLER_COMMAND = -9999 #used by air to fill as DP command

static func is_float_almost_equal(a, b, epsilon = FRAME_SECOND_EPSILON):
    return abs(a - b) <= epsilon
	
static func has_frame_based_duration_ellapsed(ellapsedSeconds,durationInSeconds):	
	return is_float_almost_equal(ellapsedSeconds,durationInSeconds) or ellapsedSeconds>=durationInSeconds
	

const NUMBER_CHUNKS_EPSILON =  0.01
static func getNumberOfChunks(amount,chunkSize):
	var diff = amount/chunkSize
	var res = floor(diff)
	
	#special case where the diference is liek 18.9999, where floor would mean = 18
	#basically, anything above 18.99 shoudl be treated as 19, for example
	#e.g., 18.999 - 18 = 0.999 (ie. <1%  differece from higher number)
	if is_float_almost_equal(1.0,diff -res ,NUMBER_CHUNKS_EPSILON):
		res = res+1
	
	#typical cases like 18.4, you have 18 chunks , floor is fine
	return res
	
	

static func opposingInputDevice(playerInputDevice):
	if playerInputDevice == PLAYER1_INPUT_DEVICE_ID:
		return PLAYER2_INPUT_DEVICE_ID
	elif playerInputDevice == PLAYER2_INPUT_DEVICE_ID:
		return PLAYER1_INPUT_DEVICE_ID
	else:
		return null
		

#given an index that may be a float, fetch the elements
#in a table given an index and interpolate between 2 cells
#when index is between both cells.
#an epsilon is given to determine when the float index is equal to an intergetre
#index.
##the idex is 99% equal to an index? e.g., 3.01 should be considred 3 and 3.99 shoudl be consiered 4.	

static func interpolateFromNumbericalArray(floatIx,lookupTable,epsilon=0.01):	
	
	#get index bounds given real index
	#e.g., 3.4, would have 3 as left index and 4 as right index
	var leftIx = int(floor(floatIx))
	var rightIx = int(ceil(floatIx))

	#limit the indices to within the lookup table's bounds
	leftIx = clamp(leftIx,0,lookupTable.size()-1)
	rightIx = clamp(rightIx,0,lookupTable.size()-1)
		
	var res = null
	#the index is 99% equal to leftIx? e.g., 3.01 should be considred 3. 3.99 shoudl be consiered 4.	
	if is_float_almost_equal(leftIx,floatIx ,epsilon):
		
		#it's directly found in the table
		res= lookupTable[leftIx]
	#effectively equal to right index
	elif is_float_almost_equal(rightIx,floatIx ,epsilon):
		#it's directly found in the table
		res= lookupTable[rightIx]
	else:
		
		#in this case the float index is in between two cells in table.
		#so we will interpolate between cells
				
		var leftValue = lookupTable[leftIx]
		var rightValue = lookupTable[rightIx]
		
		#simle case where same value?
		if leftValue == rightValue:
			res=rightValue
			
		else:
			#normalized the float index between 0 and 1, where closer to 0 means closer
			#to leftIx and closer to 1 means closer to rightIx
			#example, 0.5 means it's between both. 0.75 means it's 3/4 of way towards rightIx	
			var normalizedIx = inverse_lerp(leftIx,rightIx,floatIx)
			
			
			
			#now convert the index to a numberical value by weighting it's distance to leftIx and rightIx's values			
	
			
			#var middle = lerp(20, 30, 0.75)
		# `middle` is now 27.5.
	
			res =lerp(leftValue,rightValue,normalizedIx)
	
	
	return res
	

static func getTechNothingMask():
			
	return COLLISION_TYPE_WALL | COLLISION_TYPE_CEILING | COLLISION_TYPE_FLOOR | COLLISION_TYPE_PLATFORM
	
	
static func list_files_in_directory(path):
    var files = []
    var dir = Directory.new()
    dir.open(path)
    dir.list_dir_begin()

    while true:
        var file = dir.get_next()
        if file == "":
            break
        elif not file.begins_with("."):
            files.append(file)

    dir.list_dir_end()

    return files

#this function will make sure the group functions  are called immediatlye
#using get_tree().call_group I beleived does call_deffered
static func my_call_group_function(sceneTree,groupName,funcName,params):
	var nodes = sceneTree.get_nodes_in_group(groupName)
	for n in nodes:
			
		if params == null or params.empty():
			n.call(funcName)
		else:
			n.callv(funcName,params)

static func parseDirectionalInput(pressingLeft,pressingRight,pressingDown,pressingUp):
	
	#not inputing a direction
	if (not pressingUp) and (not pressingDown) and (not pressingRight) and (not pressingLeft):
		return  DirectionalInput.NEUTRAL
		
	
	#pressing up will override holding down (don't want player to be able to buffer upward attacks
	#while being able to block low)
	#pressing forward overrides if holding back: don't want player buffer in a forward attack while hold
	#back blocking
	#keep in mind that the C-STICK may cause issues, as if you can freely map any move to it
	#then the c stick could be used do forwards commands without ever releasing hold back
	if pressingUp:		
		if pressingRight:
			return DirectionalInput.FORWARD_UP	
		if pressingLeft:
			return DirectionalInput.BACKWARD_UP
		return DirectionalInput.UP
	if pressingDown:		
		if pressingRight:
			return DirectionalInput.FORWARD_DOWN
		if pressingLeft:
			return DirectionalInput.BACKWARD_DOWN
		return DirectionalInput.DOWN
	if pressingRight:				
		return DirectionalInput.FORWARD
	
	if pressingLeft:				
		return DirectionalInput.BACKWARD
		
	
	#shouldn't reach this point
	print("illegal state in DI handler")
	return DirectionalInput.NEUTRAL
		