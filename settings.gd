extends Node

const SECTION_IX = 0
const KEY_IX = 1
const VALUE_IX = 2

const SETTINGS_FILE_PATH = "user://settings.cfg" 

const TEMP_USER_SETTINGS_SECTION ="temporary-game-session-settings"#only changed durign the game session (forget on exit) (e.g.: max HP)
const PERSISTENT_USER_SETTINGS_SECTION ="persistent-settings" #persists between game session (e.g: SFX on/off)
const INTERNAL_SETTINGS_SECTION ="internal-settings"#cannot be cahnged by user, read-only and fed into game to configure it (e.g.: ripost reactive window length)


const HP_KEY = "HP_KEY"
const MATCH_TIME_IN_MINUTES_KEY = "MATCH_TIME_IN_MINUTES_KEY"
const STYLE_POINTS_ROUND_TIME_IN_SECONDS_KEY = "STYLE_POINTS_ROUND_TIME_IN_SECONDS_KEY"
const ABILITY_BAR_SIZE_MOD = "ABILITY_BAR_SIZE_MOD"
const DEFAULT_ABILITY_BAR_KEY = "DEFAULT_ABILITY_BAR_KEY"
const ABILITY_BAR_CANCEL_COST_MOD_APROF_KEY = "ABILITY_BAR_CANCEL_COST_MOD_APROF_KEY"
const ABILITY_BAR_CANCEL_COST_MOD_DPROF_KEY = "ABILITY_BAR_CANCEL_COST_MOD_DPROF_KEY"
const ABILITY_BAR_CANCEL_COST_MOD_NOPROF_KEY = "ABILITY_BAR_CANCEL_COST_MOD_NOPROF_KEY"
const ABILITY_CANCEL_SPAM_HITSTUN_PRORATION_SETBACK_KEY = "ABILITY_CANCEL_SPAM_HITSTUN_PRORATION_SETBACK_KEY"
const ABILITY_BAR_NUMBER_OF_CHUNKS_KEY = "ABILITY_BAR_NUMBER_OF_CHUNKS_KEY"
const RIPOST_DAMAGE_APROF_KEY = "RIPOST_DAMAGE_APROF_KEY"
const RIPOST_DAMAGE_DPROF_KEY = "RIPOST_DAMAGE_DPROF_KEY"
const RIPOST_DAMAGE_NOPROF_KEY = "RIPOST_DAMAGE_NOPROF_KEY"
const DAMAGE_GUAGE_FAILED_RIPOST_MOD_INCREASE_APROF_KEY = "DAMAGE_GUAGE_FAILED_RIPOST_MOD_INCREASE_APROF_KEY"
const DAMAGE_GUAGE_FAILED_RIPOST_MOD_INCREASE_DPROF_KEY = "DAMAGE_GUAGE_FAILED_RIPOST_MOD_INCREASE_DPROF_KEY"
const DAMAGE_GUAGE_FAILED_RIPOST_MOD_INCREASE_NOPROF_KEY = "DAMAGE_GUAGE_FAILED_RIPOST_MOD_INCREASE_NOPROF_KEY"
const FOCUS_FAILED_RIPOST_MOD_INCREASE_APROF_KEY = "FOCUS_FAILED_RIPOST_MOD_INCREASE_APROF_KEY"
const FOCUS_FAILED_RIPOST_MOD_INCREASE_DPROF_KEY = "FOCUS_FAILED_RIPOST_MOD_INCREASE_DPROF_KEY"
const FOCUS_FAILED_RIPOST_MOD_INCREASE_NOPROF_KEY = "FOCUS_FAILED_RIPOST_MOD_INCREASE_NOPROF_KEY"
const RIPOSTING_ABILITY_BAR_COST_APROF_KEY = "RIPOSTING_ABILITY_BAR_COST_APROF_KEY"
const RIPOSTING_ABILITY_BAR_COST_DPROF_KEY = "RIPOSTING_ABILITY_BAR_COST_DPROF_KEY"
const RIPOSTING_ABILITY_BAR_COST_NOPROF_KEY = "RIPOSTING_ABILITY_BAR_COST_NOPROF_KEY"
const COUNTER_RIPOSTING_ABILITY_BAR_COST_APROF_KEY = "COUNTER_RIPOSTING_ABILITY_BAR_COST_APROF_KEY"
const COUNTER_RIPOSTING_ABILITY_BAR_COST_DPROF_KEY = "COUNTER_RIPOSTING_ABILITY_BAR_COST_DPROF_KEY"
const COUNTER_RIPOSTING_ABILITY_BAR_COST_NOPROF_KEY = "COUNTER_RIPOSTING_ABILITY_BAR_COST_NOPROF_KEY"
const ENORMOUS_BLOCK_CHIP_DAMAGE_MOD_PROF_KEY = "ENORMOUS_BLOCK_CHIP_DAMAGE_MOD_PROF_KEY"
const DAMAGE_GUAGE_COMBO_LEVELUP_MOD_INCREASE_APROF_KEY = "DAMAGE_GUAGE_COMBO_LEVELUP_MOD_INCREASE_APROF_KEY"
const DAMAGE_GUAGE_COMBO_LEVELUP_MOD_INCREASE_DPROF_KEY = "DAMAGE_GUAGE_COMBO_LEVELUP_MOD_INCREASE_DPROF_KEY"
const DAMAGE_GUAGE_COMBO_LEVELUP_MOD_INCREASE_NOPROF_KEY = "DAMAGE_GUAGE_COMBO_LEVELUP_MOD_INCREASE_NOPROF_KEY"
const DAMAGE_GUAGE_RATE_MOD_APROF_KEY = "DAMAGE_GUAGE_RATE_MOD_APROF_KEY"
const DAMAGE_GUAGE_RATE_MOD_DPROF_KEY = "DAMAGE_GUAGE_RATE_MOD_DPROF_KEY"
const DAMAGE_GUAGE_RATE_MOD_NOPROF_KEY = "DAMAGE_GUAGE_RATE_MOD_NOPROF_KEY"
const FOCUS_COMBO_LEVELUP_MOD_INCREASE_APROF_KEY = "FOCUS_COMBO_LEVELUP_MOD_INCREASE_APROF_KEY"
const FOCUS_COMBO_LEVELUP_MOD_INCREASE_DPROF_KEY = "FOCUS_COMBO_LEVELUP_MOD_INCREASE_DPROF_KEY"
const FOCUS_COMBO_LEVELUP_MOD_INCREASE_NOPROF_KEY = "FOCUS_COMBO_LEVELUP_MOD_INCREASE_NOPROF_KEY"
const FOCUS_RATE_MOD_APROF_KEY = "FOCUS_RATE_MOD_APROF_KEY"
const FOCUS_RATE_MOD_DPROF_KEY = "FOCUS_RATE_MOD_DPROF_KEY"
const FOCUS_RATE_MOD_NOPROF_KEY = "FOCUS_RATE_MOD_NOPROF_KEY"
const COMBO_LEVEL_ABILITY_INCREASE_APROF_KEY = "COMBO_LEVEL_ABILITY_INCREASE_APROF_KEY"
const COMBO_LEVEL_ABILITY_INCREASE_DPROF_KEY = "COMBO_LEVEL_ABILITY_INCREASE_DPROF_KEY"
const COMBO_LEVEL_ABILITY_INCREASE_NOPROF_KEY = "COMBO_LEVEL_ABILITY_INCREASE_NOPROF_KEY"

const ACROBATICS_ABILITY_CANCEL_EXTRA_JUMP_BAR_COST_KEY = "ACROBATICS_ABILITY_CANCEL_EXTRA_JUMP_BAR_COST_KEY"

const ONLINE_MODE_DEBUG_FLAG_KEY = "ONLINE_MODE_DEBUG_FLAG_KEY"
const ONLINE_MODE_HOST_PORT_FLAG_KEY = "ONLINE_MODE_HOST_PORT_FLAG_KEY"

const FAILED_RIPOST_BAR_GAIN_LOCK_DURATION_APROF_KEY = "FAILED_RIPOST_BAR_GAIN_LOCK_DURATION_APROF_KEY"
const FAILED_RIPOST_BAR_GAIN_LOCK_DURATION_DPROF_KEY = "FAILED_RIPOST_BAR_GAIN_LOCK_DURATION_DPROF_KEY"
const FAILED_RIPOST_BAR_GAIN_LOCK_DURATION_NOPROF_KEY = "FAILED_RIPOST_BAR_GAIN_LOCK_DURATION_NOPROF_KEY"

const FAILED_RIPOST_BAR_GAIN_LOCK_MIN_NUM_HIT_APROF_KEY = "FAILED_RIPOST_BAR_GAIN_LOCK_MIN_NUM_HIT_APROF_KEY"
const FAILED_RIPOST_BAR_GAIN_LOCK_MIN_NUM_HIT_DPROF_KEY = "FAILED_RIPOST_BAR_GAIN_LOCK_MIN_NUM_HIT_DPROF_KEY"
const FAILED_RIPOST_BAR_GAIN_LOCK_MIN_NUM_HIT_NOPROF_KEY = "FAILED_RIPOST_BAR_GAIN_LOCK_MIN_NUM_HIT_NOPROF_KEY"

const SKIP_LOAD_SCREEN_DELAY_FLAG_KEY = "SKIP_LOAD_SCREEN_DELAY_FLAG_KEY"
#const FIXED_DELTA_FLAG_KEY = "FIXED_DELTA_FLAG_KEY"

const DAMAGE_GUAGE_CASH_IN_AMOUNT_INCREASE_MOD_APROF_KEY = "DAMAGE_GUAGE_CASH_IN_AMOUNT_INCREASE_MOD_APROF_KEY"
const DAMAGE_GUAGE_CASH_IN_AMOUNT_INCREASE_MOD_DPROF_KEY = "DAMAGE_GUAGE_CASH_IN_AMOUNT_INCREASE_MOD_DPROF_KEY"
const DAMAGE_GUAGE_CASH_IN_AMOUNT_INCREASE_MOD_NOPROF_KEY = "DAMAGE_GUAGE_CASH_IN_AMOUNT_INCREASE_MOD_NOPROF_KEY"

const NUMBER_CHUNKS_GAIN_THRESHOLD_ON_HALF_HP_KEY = "NUMBER_CHUNKS_GAIN_THRESHOLD_ON_HALF_HP_KEY"


const FOCUS_CASH_IN_AMOUNT_INCREASE_MOD_APROF_KEY = "FOCUS_CASH_IN_AMOUNT_INCREASE_MOD_APROF_KEY"
const FOCUS_CASH_IN_AMOUNT_INCREASE_MOD_DPROF_KEY = "FOCUS_CASH_IN_AMOUNT_INCREASE_MOD_DPROF_KEY"
const FOCUS_CASH_IN_AMOUNT_INCREASE_MOD_NOPROF_KEY = "FOCUS_CASH_IN_AMOUNT_INCREASE_MOD_NOPROF_KEY"


const DEFAULT_BONUS_GUARD_DAMAGE_VS_AIR_OPPONENT_KEY = "DEFAULT_BONUS_GUARD_DAMAGE_VS_AIR_OPPONENT_KEY"

#DMG PRORATION REDUCTION ON ABILITY CANCEL
const ABILITY_CANCEL_COMBO_PRORATION_MOD_APROF_KEY = "ABILITY_CANCEL_COMBO_PRORATION_MOD_APROF_KEY"
const ABILITY_CANCEL_COMBO_PRORATION_MOD_DPROF_KEY = "ABILITY_CANCEL_COMBO_PRORATION_MOD_DPROF_KEY"
const ABILITY_CANCEL_COMBO_PRORATION_MOD_NOPROF_KEY = "ABILITY_CANCEL_COMBO_PRORATION_MOD_NOPROF_KEY"

#HITSTUN PRORATION REDUCTION ON ABILITY CANCEL
const ABILITY_CANCEL_HITSTUN_PRORATION_MOD_APROF_KEY = "ABILITY_CANCEL_HITSTUN_PRORATION_MOD_APROF_KEY"
const ABILITY_CANCEL_HITSTUN_PRORATION_MOD_DPROF_KEY = "ABILITY_CANCEL_HITSTUN_PRORATION_MOD_DPROF_KEY"
const ABILITY_CANCEL_HITSTUN_PRORATION_MOD_NOPROF_KEY = "ABILITY_CANCEL_HITSTUN_PRORATION_MOD_NOPROF_KEY"


const ABILITY_CANCEL_COMBO_LVL_PRORATION_MOD_APROF_KEY = "ABILITY_CANCEL_COMBO_LVL_PRORATION_MOD_APROF_KEY"
const ABILITY_CANCEL_COMBO_LVL_PRORATION_MOD_DPROF_KEY = "ABILITY_CANCEL_COMBO_LVL_PRORATION_MOD_DPROF_KEY"
const ABILITY_CANCEL_COMBO_LVL_PRORATION_MOD_NOPROF_KEY = "ABILITY_CANCEL_COMBO_LVL_PRORATION_MOD_NOPROF_KEY"


const ON_RIPOST_DMG_AMOUNT_INCREASE_RATIO_APROF_KEY = "ON_RIPOST_DMG_AMOUNT_INCREASE_RATIO_APROF_KEY"
const ON_RIPOST_DMG_AMOUNT_INCREASE_RATIO_DPROF_KEY = "ON_RIPOST_DMG_AMOUNT_INCREASE_RATIO_DPROF_KEY"
const ON_RIPOST_DMG_AMOUNT_INCREASE_RATIO_NOPROF_KEY = "ON_RIPOST_DMG_AMOUNT_INCREASE_RATIO_NOPROF_KEY"

const ON_RIPOST_BAR_REDUCE_AMOUNT_APROF_KEY = "ON_RIPOST_BAR_REDUCE_AMOUNT_APROF_KEY"
const ON_RIPOST_BAR_REDUCE_AMOUNT_DPROF_KEY = "ON_RIPOST_BAR_REDUCE_AMOUNT_DPROF_KEY"
const ON_RIPOST_BAR_REDUCE_AMOUNT_NOPROF_KEY = "ON_RIPOST_BAR_REDUCE_AMOUNT_NOPROF_KEY"

const INCORRECT_BLOCK_DAMAGE_REDUCTION_MOD_PROF_KEY="INCORRECT_BLOCK_DAMAGE_REDUCTION_MOD_PROF_KEY"
const AUTO_RIPOST_GUARD_REGEN_BUFF_MOD_KEY = "AUTO_RIPOST_GUARD_REGEN_BUFF_MOD_KEY"	
const AUTO_RIPOST_GUARD_REGEN_BUFF_FILL_AMOUNT_KEY = "AUTO_RIPOST_GUARD_REGEN_BUFF_FILL_AMOUNT_KEY"	

const RIPOSTING_PRE_WINDOW_LENGTH_KEY = "RIPOSTING_PRE_WINDOW_LENGTH_KEY"
const RIPOSTING_REACT_WINDOW_LENGTH_KEY = "RIPOSTING_REACT_WINDOW_LENGTH_KEY"
const RIPOSTING_HIT_STUN_DURATION_NUM_FRAMES_KEY = "RIPOSTING_HIT_STUN_DURATION_NUM_FRAMES_KEY"
const RIPOSTING_HIT_FREEZE_DURATION_NUM_FRAMES_KEY = "RIPOSTING_HIT_FREEZE_DURATION_NUM_FRAMES_KEY"
const RIPOSTING_ABILITY_BAR_REGEN_MOD_KEY = "RIPOSTING_ABILITY_BAR_REGEN_MOD_KEY"
const COUNTER_RIPOSTING_PRE_WINDOW_LENGTH_KEY = "COUNTER_RIPOSTING_PRE_WINDOW_LENGTH_KEY"
const BLOCK_COOLDOWN_DURATION_SECONDS_KEY = "BLOCK_COOLDOWN_DURATION_SECONDS_KEY"
const GRAB_COOLDOWN_DURATION_SECONDS_KEY = "GRAB_COOLDOWN_DURATION_SECONDS_KEY"
const FAILED_BLOCK_DAMAGE_DECREASE_KEY = "FAILED_BLOCK_DAMAGE_DECREASE_KEY"
const ANTIBLOCK_HITSTUN_DURATION_NUM_FRAMES_KEY = "ANTIBLOCK_HITSTUN_DURATION_NUM_FRAMES_KEY"
#const ANTIBLOCK_FAIL_DAMAGE_KEY = "ANTIBLOCK_FAIL_DAMAGE_KEY"
const ANTIBLOCK_SUCESS_DAMAGE_KEY = "ANTIBLOCK_SUCESS_DAMAGE_KEY"
const FAILED_BLOCK_DAMAGE_CAP_DECREASE_KEY = "FAILED_BLOCK_DAMAGE_CAP_DECREASE_KEY"
const FAILED_BLOCK_FOCUS_DECREASE_KEY = "FAILED_BLOCK_FOCUS_DECREASE_KEY"
const FAILED_BLOCK_FOCUS_CAP_DECREASE_KEY= "FAILED_BLOCK_FOCUS_CAP_DECREASE_KEY"
const FAILED_TECH_ABILITY_BAR_COST_KEY = "FAILED_TECH_ABILITY_BAR_COST_KEY"
const TECH_ABILITY_BAR_COST_NO_PROF_KEY = "TECH_ABILITY_BAR_COST_NO_PROF_KEY"
const TECH_ABILITY_BAR_COST_ADV_PROF_KEY = "TECH_ABILITY_BAR_COST_ADV_PROF_KEY"
const TECH_ABILITY_BAR_COST_DIS_PROF_KEY = "TECH_ABILITY_BAR_COST_DIS_PROF_KEY"
const REBOUND_DAMAGE_THRESHOLD_KEY = "REBOUND_DAMAGE_THRESHOLD_KEY"
const MINIMUM_NUM_REBOUND_FRAMES_KEY = "MINIMUM_NUM_REBOUND_FRAMES_KEY"
const REBOUND_FRAMES_MOD_KEY = "REBOUND_FRAMES_MOD_KEY"
const MAXIMUM_NUM_REBOUND_FRAMES_SAME_DAMAGE_KEY = "MAXIMUM_NUM_REBOUND_FRAMES_SAME_DAMAGE_KEY"
const HIGH_DAMAGE_THESHOLD_KEY = "HIGH_DAMAGE_THESHOLD_KEY"
const NUMBER_OF_JUMPS_KEY = "NUMBER_OF_JUMPS_KEY"
const MAX_DAMAGE_GUAGE_KEY = "MAX_DAMAGE_GUAGE_KEY"
const MAX_FOCUS_KEY = "MAX_FOCUS_KEY"
const MAX_NUM_WALL_BOUNCES_BEFORE_FALLING_HITSTUN_KEY = "MAX_NUM_WALL_BOUNCES_BEFORE_FALLING_HITSTUN_KEY"
const SKIP_PROFICIENCY_SELECT_FLAG_KEY = "SKIP_PROFICIENCY_SELECT_FLAG_KEY"
const LOAD_GAME_IN_DIFFERENT_THREAD_KEY = "LOAD_GAME_IN_DIFFERENT_THREAD_KEY"
const GLOBAL_SPEED_MOD_KEY = "GLOBAL_SPEED_MOD_KEY"
const SKIP_STAGE_SELECT_FLAG_KEY = "SKIP_STAGE_SELECT_FLAG_KEY"
const BASE_ABILITY_CANCEL_COST_KEY = "BASE_ABILITY_CANCEL_COST_KEY"
const BLOCK_EFFICIENCY_DEFAULT_KEY = "BLOCK_EFFICIENCY_DEFAULT_KEY"
const BLOCK_EFFICIENCY_MAX_KEY = "BLOCK_EFFICIENCY_MAX_KEY"
const BLOCK_EFFICIENCY_MIN_KEY = "BLOCK_EFFICIENCY_MIN_KEY"
const CREW_BATTLE_FLAG_KEY = "CREW_BATTLE_FLAG_KEY"
const ENABLE_STYLE_POINTS_ROUND_KEY = "ENABLE_STYLE_POINTS_ROUND_KEY"

const MAX_GUARD_NO_PROF_HP_KEY = "MAX_GUARD_NO_PROF_HP_KEY"
const MAX_GUARD_ADV_PROF_HP_KEY = "MAX_GUARD_ADV_PROF_HP_KEY"
const MAX_GUARD_DIS_PROF_HP_KEY = "MAX_GUARD_DIS_PROF_HP_KEY"
const DEFAULT_GUARD_NO_PROF_HP_KEY = "DEFAULT_GUARD_NO_PROF_HP_KEY"
const DEFAULT_GUARD_ADV_PROF_HP_KEY = "DEFAULT_GUARD_ADV_PROF_HP_KEY"
const DEFAULT_GUARD_DIS_PROF_HP_KEY = "DEFAULT_GUARD_DIS_PROF_HP_KEY"
const GUARD_REGEN_FROM_PERFECT_BLOCK_PROF_KEY = "GUARD_REGEN_FROM_PERFECT_BLOCK_PROF_KEY"
const GUARD_HP_REGEN_RATE_PER_SECOND_NO_PROF_KEY = "GUARD_HP_REGEN_RATE_PER_SECOND_NO_PROF_KEY"
const GUARD_HP_REGEN_RATE_PER_SECOND_ADV_PROF_KEY = "GUARD_HP_REGEN_RATE_PER_SECOND_ADV_PROF_KEY"
const GUARD_HP_REGEN_RATE_PER_SECOND_DIS_PROF_KEY = "GUARD_HP_REGEN_RATE_PER_SECOND_DIS_PROF_KEY"
const GUARD_HP_HOLD_BACK_REDUCE_RATE_PER_SECOND_NO_PROF_KEY = "GUARD_HP_HOLD_BACK_REDUCE_RATE_PER_SECOND_NO_PROF_KEY"
const GUARD_HP_HOLD_BACK_REDUCE_RATE_PER_SECOND_ADV_PROF_KEY = "GUARD_HP_HOLD_BACK_REDUCE_RATE_PER_SECOND_ADV_PROF_KEY"
const GUARD_HP_HOLD_BACK_REDUCE_RATE_PER_SECOND_DIS_PROF_KEY = "GUARD_HP_HOLD_BACK_REDUCE_RATE_PER_SECOND_DIS_PROF_KEY"
const AUTO_RIPOST_BAR_COST_NO_PROF_KEY = "AUTO_RIPOST_BAR_COST_NO_PROF_KEY"
const AUTO_RIPOST_BAR_COST_ADV_PROF_KEY = "AUTO_RIPOST_BAR_COST_ADV_PROF_KEY"
const AUTO_RIPOST_BAR_COST_DIS_PROF_KEY = "AUTO_RIPOST_BAR_COST_DIS_PROF_KEY"
const PUSH_BLOCK_BAR_COST_DIS_PROF_KEY = "PUSH_BLOCK_BAR_COST_DIS_PROF_KEY"
const PUSH_BLOCK_BAR_COST_ADV_PROF_KEY = "PUSH_BLOCK_BAR_COST_ADV_PROF_KEY"
const PUSH_BLOCK_BAR_COST_NO_PROF_KEY = "PUSH_BLOCK_BAR_COST_NO_PROF_KEY"
const LOSE_GUARD_HP_WHILE_MOVING_BACK_FLAG_KEY = "LOSE_GUARD_HP_WHILE_MOVING_BACK_FLAG_KEY"
const GAIN_BAR_ON_GUARD_BREAK_FLAG_KEY = "GAIN_BAR_ON_GUARD_BREAK_FLAG_KEY"
const BAR_GAIN_FROM_GUARD_BREAK_KEY = "BAR_GAIN_FROM_GUARD_BREAK_KEY"
#const AIR_DASH_SPEED_MOD_DIS_PROF_KEY = "AIR_DASH_SPEED_MOD_DIS_PROF_KEY"
#const AIR_DASH_SPEED_MOD_ADV_PROF_KEY = "AIR_DASH_SPEED_MOD_ADV_PROF_KEY"
#const AIR_DASH_SPEED_MOD_NO_PROF_KEY = "AIR_DASH_SPEED_MOD_NO_PROF_KEY"
#const JUMP_SPEED_MOD_DIS_PROF_KEY="JUMP_SPEED_MOD_DIS_PROF_KEY"
#const JUMP_SPEED_MOD_ADV_PROF_KEY="JUMP_SPEED_MOD_ADV_PROF_KEY"
#const JUMP_SPEED_MOD_NO_PROF_KEY = "JUMP_SPEED_MOD_NO_PROF_KEY"

const NUM_JUMPS_DIS_PROF_KEY = "NUM_JUMPS_DIS_PROF_KEY"
const NUM_JUMPS_ADV_PROF_KEY = "NUM_JUMPS_ADV_PROF_KEY"
const NUM_JUMPS_NO_PROF_KEY = "NUM_JUMPS_NO_PROF_KEY"

const GET_BACK_DASH_ON_JUMP_DIS_PROF_KEY = "GET_BACK_DASH_ON_JUMP_DIS_PROF_KEY"
const GET_BACK_DASH_ON_JUMP_ADV_PROF_KEY = "GET_BACK_DASH_ON_JUMP_ADV_PROF_KEY"
const GET_BACK_DASH_ON_JUMP_NO_PROF_KEY = "GET_BACK_DASH_ON_JUMP_NO_PROF_KEY"
const NUM_JUMPS_RECOVERED_FROM_ABILITY_CANCEL_DIS_PROF_KEY = "NUM_JUMPS_RECOVERED_FROM_ABILITY_CANCEL_DIS_PROF_KEY"
const NUM_JUMPS_RECOVERED_FROM_ABILITY_CANCEL_ADV_PROF_KEY = "NUM_JUMPS_RECOVERED_FROM_ABILITY_CANCEL_ADV_PROF_KEY"
const NUM_JUMPS_RECOVERED_FROM_ABILITY_CANCEL_NO_PROF_KEY = "NUM_JUMPS_RECOVERED_FROM_ABILITY_CANCEL_NO_PROF_KEY"
const REGEN_GUARD_IN_AIR_DIS_PROF_KEY = "REGEN_GUARD_IN_AIR_DIS_PROF_KEY"
const REGEN_GUARD_IN_AIR_NO_PROF_KEY = "REGEN_GUARD_IN_AIR_NO_PROF_KEY"
const REGEN_GUARD_IN_AIR_ADV_PROF_KEY = "REGEN_GUARD_IN_AIR_ADV_PROF_KEY"
const RECOVER_DASH_JUMP_FROM_AIR_BLOCK_DIS_PROF_KEY = "RECOVER_DASH_JUMP_FROM_AIR_BLOCK_DIS_PROF_KEY"
const RECOVER_DASH_JUMP_FROM_AIR_BLOCK_NO_PROF_KEY = "RECOVER_DASH_JUMP_FROM_AIR_BLOCK_NO_PROF_KEY"
const RECOVER_DASH_JUMP_FROM_AIR_BLOCK_ADV_PROF_KEY = "RECOVER_DASH_JUMP_FROM_AIR_BLOCK_ADV_PROF_KEY"

const RECOVER_AIR_DASH_ON_HIT_DIS_PROF_KEY = "RECOVER_AIR_DASH_ON_HIT_DIS_PROF_KEY"
const RECOVER_AIR_DASH_ON_HIT_ADV_PROF_KEY = "RECOVER_AIR_DASH_ON_HIT_ADV_PROF_KEY"
const RECOVER_AIR_DASH_ON_HIT_NO_PROF_KEY = "RECOVER_AIR_DASH_ON_HIT_NO_PROF_KEY"
	
		
#const GROUND_DASH_SPEED_MOD_DIS_PROF_KEY = "GROUND_DASH_SPEED_MOD_DIS_PROF_KEY"
#const GROUND_DASH_SPEED_MOD_ADV_PROF_KEY = "GROUND_DASH_SPEED_MOD_ADV_PROF_KEY"
#const GROUND_DASH_SPEED_MOD_NO_PROF_KEY = "GROUND_DASH_SPEED_MOD_NO_PROF_KEY"

const DAMAGE_GUAGE_ADDITIONAL_DAMAGE_PER_STAR_APROF_KEY = "DAMAGE_GUAGE_ADDITIONAL_DAMAGE_PER_STAR_APROF_KEY"
const DAMAGE_GUAGE_ADDITIONAL_DAMAGE_PER_STAR_DPROF_KEY = "DAMAGE_GUAGE_ADDITIONAL_DAMAGE_PER_STAR_DPROF_KEY"
const DAMAGE_GUAGE_ADDITIONAL_DAMAGE_PER_STAR_NOPROF_KEY = "DAMAGE_GUAGE_ADDITIONAL_DAMAGE_PER_STAR_NOPROF_KEY"

const DAMAGE_PROF_GUARD_BLOCK_AMAGE_MOD_APROF_KEY="DAMAGE_PROF_GUARD_BLOCK_AMAGE_MOD_APROF_KEY"
const DAMAGE_PROF_GUARD_BLOCK_AMAGE_MOD_DPROF_KEY="DAMAGE_PROF_GUARD_BLOCK_AMAGE_MOD_DPROF_KEY"
const DAMAGE_PROF_GUARD_BLOCK_AMAGE_MOD_NOPROF_KEY="DAMAGE_PROF_GUARD_BLOCK_AMAGE_MOD_NOPROF_KEY"

#SPECIFies how much additional cost an auto ability cancel costs compared to if it was manually canceled
const AUTO_ABILITY_CANCEL_COST_APROF_KEY="AUTO_ABILITY_CANCEL_COST_APROF_KEY"
const AUTO_ABILITY_CANCEL_COST_DPROF_KEY="AUTO_ABILITY_CANCEL_COST_DPROF_KEY"
const AUTO_ABILITY_CANCEL_COST_NOPROF_KEY="AUTO_ABILITY_CANCEL_COST_NOPROF_KEY"

const TRAIN_AI_FLAG_KEY = "TRAIN_AI_FLAG_KEY"
const DEFAULT_HP = 1850
const RIPOSTING_PRE_WINDOW_LENGTH =60
const RIPOSTING_REACT_WINDOW_LENGTH = 2
# 38 extra frames of prediction time, to make it easire to input counter ripost and then a move. there should be no 
#mechanical demand for counter riposting. if you can see the ripost coming, then by all means, give the yami level 2
#player a fee win easily
const COUNTER_RIPOST_ADDITIONAL_WINDOW_FRAME_LENGTH = 46
const RIPOSTING_HIT_STUN_DURATION_NUM_FRAMES  = 180 #3 secs



const DEFAULT_VALUE_MAP = [
	[TEMP_USER_SETTINGS_SECTION,HP_KEY, DEFAULT_HP],
	#[TEMP_USER_SETTINGS_SECTION,ABILITY_BAR_SIZE_MOD, DEFAULT_HP/2],#BAR WILL FILL TWICE FROM 0 TO DEATH
	#[TEMP_USER_SETTINGS_SECTION,DEFAULT_ABILITY_BAR_KEY, DEFAULT_HP/4],#START WITH HALF OF MAX BAR
	[TEMP_USER_SETTINGS_SECTION,ABILITY_BAR_SIZE_MOD, 1.0], #size of BAR. e.G., 0.5 means twice as large, so gain from being hit would be slow , and 2 would be twice as fast
	#the way to find what the desired mabiliyt bar max mod is, given desired HP is as follows func DESIREDMOD{ return ((2500/ target hp) * 0.4) }
	[TEMP_USER_SETTINGS_SECTION,DEFAULT_ABILITY_BAR_KEY, 12],#START with 8 chunks
	[INTERNAL_SETTINGS_SECTION,ABILITY_BAR_CANCEL_COST_MOD_APROF_KEY, -2],# all will cost 2 chunk less
	[INTERNAL_SETTINGS_SECTION,ABILITY_BAR_CANCEL_COST_MOD_DPROF_KEY, 2],# all will cost 2 chunk more
	[INTERNAL_SETTINGS_SECTION,ABILITY_BAR_CANCEL_COST_MOD_NOPROF_KEY, 0],
	[INTERNAL_SETTINGS_SECTION,BASE_ABILITY_CANCEL_COST_KEY, 3],
	[INTERNAL_SETTINGS_SECTION,ABILITY_CANCEL_SPAM_HITSTUN_PRORATION_SETBACK_KEY, 3],	
	[TEMP_USER_SETTINGS_SECTION,ABILITY_BAR_NUMBER_OF_CHUNKS_KEY, 24],#MORE CHUNKS -> LESS COST : FEWER CHUNKS -> MORE COST
	[INTERNAL_SETTINGS_SECTION,RIPOST_DAMAGE_APROF_KEY, 80],
	[INTERNAL_SETTINGS_SECTION,RIPOST_DAMAGE_DPROF_KEY, 80],
	[INTERNAL_SETTINGS_SECTION,RIPOST_DAMAGE_NOPROF_KEY, 80],
	[INTERNAL_SETTINGS_SECTION,DAMAGE_GUAGE_FAILED_RIPOST_MOD_INCREASE_APROF_KEY, 0.75],#25% less base damage gauge feed
	[INTERNAL_SETTINGS_SECTION,DAMAGE_GUAGE_FAILED_RIPOST_MOD_INCREASE_DPROF_KEY, 1.25],#25% moreof base damage gauge feed
	[INTERNAL_SETTINGS_SECTION,DAMAGE_GUAGE_FAILED_RIPOST_MOD_INCREASE_NOPROF_KEY, 1.0],#100% of base damage gauge feed
	[INTERNAL_SETTINGS_SECTION,FOCUS_FAILED_RIPOST_MOD_INCREASE_APROF_KEY, 0.2],
	[INTERNAL_SETTINGS_SECTION,FOCUS_FAILED_RIPOST_MOD_INCREASE_DPROF_KEY, 0.35],
	[INTERNAL_SETTINGS_SECTION,FOCUS_FAILED_RIPOST_MOD_INCREASE_NOPROF_KEY, 0.25],
	[INTERNAL_SETTINGS_SECTION,RIPOSTING_ABILITY_BAR_COST_APROF_KEY, 3],
	[INTERNAL_SETTINGS_SECTION,RIPOSTING_ABILITY_BAR_COST_DPROF_KEY, 5],
	[INTERNAL_SETTINGS_SECTION,RIPOSTING_ABILITY_BAR_COST_NOPROF_KEY, 4],
	[INTERNAL_SETTINGS_SECTION,COUNTER_RIPOSTING_ABILITY_BAR_COST_APROF_KEY, 4],
	[INTERNAL_SETTINGS_SECTION,COUNTER_RIPOSTING_ABILITY_BAR_COST_DPROF_KEY, 6],
	[INTERNAL_SETTINGS_SECTION,COUNTER_RIPOSTING_ABILITY_BAR_COST_NOPROF_KEY, 5],
	[INTERNAL_SETTINGS_SECTION,ENORMOUS_BLOCK_CHIP_DAMAGE_MOD_PROF_KEY, 0.35],	 #TAKE 35% chip damage when blocking
	[INTERNAL_SETTINGS_SECTION,DAMAGE_GUAGE_COMBO_LEVELUP_MOD_INCREASE_APROF_KEY, 0.25],
	[INTERNAL_SETTINGS_SECTION,DAMAGE_GUAGE_COMBO_LEVELUP_MOD_INCREASE_DPROF_KEY, 0.15],
	[INTERNAL_SETTINGS_SECTION,DAMAGE_GUAGE_COMBO_LEVELUP_MOD_INCREASE_NOPROF_KEY, 0.2],
	[INTERNAL_SETTINGS_SECTION,DAMAGE_GUAGE_RATE_MOD_APROF_KEY, 0.3],
	[INTERNAL_SETTINGS_SECTION,DAMAGE_GUAGE_RATE_MOD_DPROF_KEY, 0.1],
	[INTERNAL_SETTINGS_SECTION,DAMAGE_GUAGE_RATE_MOD_NOPROF_KEY, 0.2],
	[INTERNAL_SETTINGS_SECTION,FOCUS_COMBO_LEVELUP_MOD_INCREASE_APROF_KEY, 0.45],
	[INTERNAL_SETTINGS_SECTION,FOCUS_COMBO_LEVELUP_MOD_INCREASE_DPROF_KEY, 0.35],
	[INTERNAL_SETTINGS_SECTION,FOCUS_COMBO_LEVELUP_MOD_INCREASE_NOPROF_KEY, 0.4],
	[INTERNAL_SETTINGS_SECTION,FOCUS_RATE_MOD_APROF_KEY, 0.35],
	[INTERNAL_SETTINGS_SECTION,FOCUS_RATE_MOD_DPROF_KEY, 0.25],
	[INTERNAL_SETTINGS_SECTION,FOCUS_RATE_MOD_NOPROF_KEY, 0.3],
	[INTERNAL_SETTINGS_SECTION,COMBO_LEVEL_ABILITY_INCREASE_APROF_KEY, 6],
	[INTERNAL_SETTINGS_SECTION,COMBO_LEVEL_ABILITY_INCREASE_DPROF_KEY, 4],
	[INTERNAL_SETTINGS_SECTION,COMBO_LEVEL_ABILITY_INCREASE_NOPROF_KEY, 5],
	
	[INTERNAL_SETTINGS_SECTION,ACROBATICS_ABILITY_CANCEL_EXTRA_JUMP_BAR_COST_KEY, 4],
	
	
	[INTERNAL_SETTINGS_SECTION,INCORRECT_BLOCK_DAMAGE_REDUCTION_MOD_PROF_KEY, -0.5], #FOR PROF that does less damage on incorrect block, do 50 % less damge(so 1.5 times gard damage instead of 3)
	[INTERNAL_SETTINGS_SECTION,AUTO_RIPOST_GUARD_REGEN_BUFF_MOD_KEY, 4],
	#[INTERNAL_SETTINGS_SECTION,AUTO_RIPOST_GUARD_REGEN_BUFF_DURATION_KEY, 60*(62.5)/(4*1.1)],#duration = time for half (62.5) the guard hp hp to regen from x4 regen rate (*60 since it's in frame/s)
	[INTERNAL_SETTINGS_SECTION,AUTO_RIPOST_GUARD_REGEN_BUFF_FILL_AMOUNT_KEY, 0.66],#used to compute duration of guard regen buff. Specifies how much of bar regens from the autofripost guard regen buf
	[TEMP_USER_SETTINGS_SECTION,ONLINE_MODE_HOST_PORT_FLAG_KEY, 3000],
	[PERSISTENT_USER_SETTINGS_SECTION,ONLINE_MODE_DEBUG_FLAG_KEY, false],
	[INTERNAL_SETTINGS_SECTION,RIPOSTING_PRE_WINDOW_LENGTH_KEY, RIPOSTING_PRE_WINDOW_LENGTH],
	[INTERNAL_SETTINGS_SECTION,RIPOSTING_REACT_WINDOW_LENGTH_KEY, RIPOSTING_REACT_WINDOW_LENGTH],
	[INTERNAL_SETTINGS_SECTION,COUNTER_RIPOSTING_PRE_WINDOW_LENGTH_KEY, COUNTER_RIPOST_ADDITIONAL_WINDOW_FRAME_LENGTH],
	[INTERNAL_SETTINGS_SECTION,RIPOSTING_HIT_STUN_DURATION_NUM_FRAMES_KEY, RIPOSTING_HIT_STUN_DURATION_NUM_FRAMES],
	[INTERNAL_SETTINGS_SECTION,RIPOSTING_HIT_FREEZE_DURATION_NUM_FRAMES_KEY, 30],
	[INTERNAL_SETTINGS_SECTION,RIPOSTING_ABILITY_BAR_REGEN_MOD_KEY, 0],
	[INTERNAL_SETTINGS_SECTION,BLOCK_COOLDOWN_DURATION_SECONDS_KEY, 12],
	[TEMP_USER_SETTINGS_SECTION,GRAB_COOLDOWN_DURATION_SECONDS_KEY,3],
	[INTERNAL_SETTINGS_SECTION,FAILED_BLOCK_DAMAGE_DECREASE_KEY, 0.05],
	[INTERNAL_SETTINGS_SECTION,ANTIBLOCK_HITSTUN_DURATION_NUM_FRAMES_KEY, 75],
	#INTERNAL_SETTINGS_SECTION,ANTIBLOCK_FAIL_DAMAGE_KEY, 20], don't think this is ussed
	[INTERNAL_SETTINGS_SECTION,ANTIBLOCK_SUCESS_DAMAGE_KEY, 65],
	[INTERNAL_SETTINGS_SECTION,FAILED_BLOCK_DAMAGE_CAP_DECREASE_KEY, 0.025],
	[INTERNAL_SETTINGS_SECTION,FAILED_BLOCK_FOCUS_DECREASE_KEY, 0.025],
	[INTERNAL_SETTINGS_SECTION,FAILED_BLOCK_FOCUS_CAP_DECREASE_KEY, 0.025],
	[INTERNAL_SETTINGS_SECTION,FAILED_TECH_ABILITY_BAR_COST_KEY, 0],
	[INTERNAL_SETTINGS_SECTION,TECH_ABILITY_BAR_COST_NO_PROF_KEY, 8],
	[INTERNAL_SETTINGS_SECTION,TECH_ABILITY_BAR_COST_ADV_PROF_KEY, 6],
	[INTERNAL_SETTINGS_SECTION,TECH_ABILITY_BAR_COST_DIS_PROF_KEY, 10],
	[INTERNAL_SETTINGS_SECTION,REBOUND_DAMAGE_THRESHOLD_KEY, 30],
	[INTERNAL_SETTINGS_SECTION,MINIMUM_NUM_REBOUND_FRAMES_KEY, 6.6],
	[INTERNAL_SETTINGS_SECTION,REBOUND_FRAMES_MOD_KEY, 0.65],
	[INTERNAL_SETTINGS_SECTION,MAXIMUM_NUM_REBOUND_FRAMES_SAME_DAMAGE_KEY, 20],	
	[INTERNAL_SETTINGS_SECTION,HIGH_DAMAGE_THESHOLD_KEY, 2],
	[INTERNAL_SETTINGS_SECTION,NUMBER_OF_JUMPS_KEY, 2],
	[INTERNAL_SETTINGS_SECTION,MAX_DAMAGE_GUAGE_KEY, 5],
	[INTERNAL_SETTINGS_SECTION,MAX_FOCUS_KEY, 5],
	[INTERNAL_SETTINGS_SECTION,FAILED_RIPOST_BAR_GAIN_LOCK_DURATION_APROF_KEY, 2],#SECONDS
	[INTERNAL_SETTINGS_SECTION,FAILED_RIPOST_BAR_GAIN_LOCK_DURATION_DPROF_KEY, 2],
	[INTERNAL_SETTINGS_SECTION,FAILED_RIPOST_BAR_GAIN_LOCK_DURATION_NOPROF_KEY, 2],
	[INTERNAL_SETTINGS_SECTION,FAILED_RIPOST_BAR_GAIN_LOCK_MIN_NUM_HIT_APROF_KEY, 3],
	[INTERNAL_SETTINGS_SECTION,FAILED_RIPOST_BAR_GAIN_LOCK_MIN_NUM_HIT_DPROF_KEY, 3],
	[INTERNAL_SETTINGS_SECTION,FAILED_RIPOST_BAR_GAIN_LOCK_MIN_NUM_HIT_NOPROF_KEY, 3],
	[INTERNAL_SETTINGS_SECTION,MAX_NUM_WALL_BOUNCES_BEFORE_FALLING_HITSTUN_KEY, 3],
	[PERSISTENT_USER_SETTINGS_SECTION,SKIP_PROFICIENCY_SELECT_FLAG_KEY, false],
	[PERSISTENT_USER_SETTINGS_SECTION,LOAD_GAME_IN_DIFFERENT_THREAD_KEY, false],
	[PERSISTENT_USER_SETTINGS_SECTION,SKIP_STAGE_SELECT_FLAG_KEY, false],
	[PERSISTENT_USER_SETTINGS_SECTION,SKIP_LOAD_SCREEN_DELAY_FLAG_KEY, false],
	[INTERNAL_SETTINGS_SECTION,GLOBAL_SPEED_MOD_KEY, 1.0],
	[INTERNAL_SETTINGS_SECTION,BLOCK_EFFICIENCY_DEFAULT_KEY, 0],
	[INTERNAL_SETTINGS_SECTION,BLOCK_EFFICIENCY_MAX_KEY, 5],
	[INTERNAL_SETTINGS_SECTION,BLOCK_EFFICIENCY_MIN_KEY, -5],	
	[TEMP_USER_SETTINGS_SECTION,MATCH_TIME_IN_MINUTES_KEY, 4.5],
	#[TEMP_USER_SETTINGS_SECTION,FIXED_DELTA_FLAG_KEY, true],	
	[INTERNAL_SETTINGS_SECTION,STYLE_POINTS_ROUND_TIME_IN_SECONDS_KEY, 15],
	[INTERNAL_SETTINGS_SECTION,DAMAGE_GUAGE_CASH_IN_AMOUNT_INCREASE_MOD_APROF_KEY, 1.25],
	[INTERNAL_SETTINGS_SECTION,DAMAGE_GUAGE_CASH_IN_AMOUNT_INCREASE_MOD_DPROF_KEY, 0.75],
	[INTERNAL_SETTINGS_SECTION,DAMAGE_GUAGE_CASH_IN_AMOUNT_INCREASE_MOD_NOPROF_KEY, 1.0],
	[INTERNAL_SETTINGS_SECTION,NUMBER_CHUNKS_GAIN_THRESHOLD_ON_HALF_HP_KEY, 10],
	[INTERNAL_SETTINGS_SECTION,FOCUS_CASH_IN_AMOUNT_INCREASE_MOD_APROF_KEY, 1.25],
	[INTERNAL_SETTINGS_SECTION,FOCUS_CASH_IN_AMOUNT_INCREASE_MOD_DPROF_KEY, 0.75],
	[INTERNAL_SETTINGS_SECTION,FOCUS_CASH_IN_AMOUNT_INCREASE_MOD_NOPROF_KEY, 1.0],
	[INTERNAL_SETTINGS_SECTION,DEFAULT_BONUS_GUARD_DAMAGE_VS_AIR_OPPONENT_KEY, 0.1],	
	[INTERNAL_SETTINGS_SECTION,ABILITY_CANCEL_COMBO_PRORATION_MOD_APROF_KEY, 3],
	[INTERNAL_SETTINGS_SECTION,ABILITY_CANCEL_COMBO_PRORATION_MOD_DPROF_KEY, 1],
	[INTERNAL_SETTINGS_SECTION,ABILITY_CANCEL_COMBO_PRORATION_MOD_NOPROF_KEY, 2],
	[INTERNAL_SETTINGS_SECTION,ABILITY_CANCEL_COMBO_LVL_PRORATION_MOD_APROF_KEY, 2],
	[INTERNAL_SETTINGS_SECTION,ABILITY_CANCEL_COMBO_LVL_PRORATION_MOD_DPROF_KEY, 2],
	[INTERNAL_SETTINGS_SECTION,ABILITY_CANCEL_COMBO_LVL_PRORATION_MOD_NOPROF_KEY, 2],
	[INTERNAL_SETTINGS_SECTION,ON_RIPOST_DMG_AMOUNT_INCREASE_RATIO_APROF_KEY, 0.75],
	[INTERNAL_SETTINGS_SECTION,ON_RIPOST_DMG_AMOUNT_INCREASE_RATIO_DPROF_KEY, 0.25],
	[INTERNAL_SETTINGS_SECTION,ON_RIPOST_DMG_AMOUNT_INCREASE_RATIO_NOPROF_KEY, 0.5],
	[INTERNAL_SETTINGS_SECTION,ON_RIPOST_BAR_REDUCE_AMOUNT_APROF_KEY, 2.5],
	[INTERNAL_SETTINGS_SECTION,ON_RIPOST_BAR_REDUCE_AMOUNT_DPROF_KEY, 1.5],
	[INTERNAL_SETTINGS_SECTION,ON_RIPOST_BAR_REDUCE_AMOUNT_NOPROF_KEY, 2],
	[INTERNAL_SETTINGS_SECTION,CREW_BATTLE_FLAG_KEY, false],
	[TEMP_USER_SETTINGS_SECTION,ENABLE_STYLE_POINTS_ROUND_KEY, false],
	[INTERNAL_SETTINGS_SECTION,MAX_GUARD_NO_PROF_HP_KEY, 125],
	[INTERNAL_SETTINGS_SECTION,MAX_GUARD_ADV_PROF_HP_KEY, 150],
	[INTERNAL_SETTINGS_SECTION,MAX_GUARD_DIS_PROF_HP_KEY, 100],
	[INTERNAL_SETTINGS_SECTION,DEFAULT_GUARD_NO_PROF_HP_KEY,125],
	[INTERNAL_SETTINGS_SECTION,DEFAULT_GUARD_ADV_PROF_HP_KEY,150],
	[INTERNAL_SETTINGS_SECTION,DEFAULT_GUARD_DIS_PROF_HP_KEY,100],
	[INTERNAL_SETTINGS_SECTION,GUARD_REGEN_FROM_PERFECT_BLOCK_PROF_KEY,125*0.15],#15% of max GUARD regen on perfect block
	[INTERNAL_SETTINGS_SECTION,GUARD_HP_REGEN_RATE_PER_SECOND_NO_PROF_KEY,0.875],
	[INTERNAL_SETTINGS_SECTION,GUARD_HP_REGEN_RATE_PER_SECOND_ADV_PROF_KEY,1.1],
	[INTERNAL_SETTINGS_SECTION,GUARD_HP_REGEN_RATE_PER_SECOND_DIS_PROF_KEY,0.7],
	[INTERNAL_SETTINGS_SECTION,GUARD_HP_HOLD_BACK_REDUCE_RATE_PER_SECOND_NO_PROF_KEY,15],
	[INTERNAL_SETTINGS_SECTION,GUARD_HP_HOLD_BACK_REDUCE_RATE_PER_SECOND_ADV_PROF_KEY,12],
	[INTERNAL_SETTINGS_SECTION,GUARD_HP_HOLD_BACK_REDUCE_RATE_PER_SECOND_DIS_PROF_KEY,18],
	[INTERNAL_SETTINGS_SECTION,AUTO_RIPOST_BAR_COST_NO_PROF_KEY,6],
	[INTERNAL_SETTINGS_SECTION,AUTO_RIPOST_BAR_COST_ADV_PROF_KEY,5],
	[INTERNAL_SETTINGS_SECTION,AUTO_RIPOST_BAR_COST_DIS_PROF_KEY,7],
	[INTERNAL_SETTINGS_SECTION,PUSH_BLOCK_BAR_COST_NO_PROF_KEY,2],
	[INTERNAL_SETTINGS_SECTION,PUSH_BLOCK_BAR_COST_ADV_PROF_KEY,1],
	[INTERNAL_SETTINGS_SECTION,PUSH_BLOCK_BAR_COST_DIS_PROF_KEY,3],
	[TEMP_USER_SETTINGS_SECTION,LOSE_GUARD_HP_WHILE_MOVING_BACK_FLAG_KEY,false],
	[TEMP_USER_SETTINGS_SECTION,GAIN_BAR_ON_GUARD_BREAK_FLAG_KEY,true],
	[TEMP_USER_SETTINGS_SECTION,BAR_GAIN_FROM_GUARD_BREAK_KEY,5],
	[INTERNAL_SETTINGS_SECTION,ABILITY_CANCEL_HITSTUN_PRORATION_MOD_APROF_KEY,3],
	[INTERNAL_SETTINGS_SECTION,ABILITY_CANCEL_HITSTUN_PRORATION_MOD_DPROF_KEY,3],
	[INTERNAL_SETTINGS_SECTION,ABILITY_CANCEL_HITSTUN_PRORATION_MOD_NOPROF_KEY,3],
	#[INTERNAL_SETTINGS_SECTION,AIR_DASH_SPEED_MOD_DIS_PROF_KEY,0.75],
	#[INTERNAL_SETTINGS_SECTION,AIR_DASH_SPEED_MOD_ADV_PROF_KEY,1.0],
	#[INTERNAL_SETTINGS_SECTION,AIR_DASH_SPEED_MOD_NO_PROF_KEY,1.0],
	#[INTERNAL_SETTINGS_SECTION,GROUND_DASH_SPEED_MOD_DIS_PROF_KEY,1.0],
	#[INTERNAL_SETTINGS_SECTION,GROUND_DASH_SPEED_MOD_ADV_PROF_KEY,1.0],
	#[INTERNAL_SETTINGS_SECTION,GROUND_DASH_SPEED_MOD_NO_PROF_KEY,1.0],
	#[INTERNAL_SETTINGS_SECTION,JUMP_SPEED_MOD_DIS_PROF_KEY,0.8],
	#[INTERNAL_SETTINGS_SECTION,JUMP_SPEED_MOD_ADV_PROF_KEY,1],
	#[INTERNAL_SETTINGS_SECTION,JUMP_SPEED_MOD_NO_PROF_KEY,1.0],
	[INTERNAL_SETTINGS_SECTION,NUM_JUMPS_DIS_PROF_KEY,2],
	[INTERNAL_SETTINGS_SECTION,NUM_JUMPS_ADV_PROF_KEY,2],
	[INTERNAL_SETTINGS_SECTION,NUM_JUMPS_NO_PROF_KEY,2],
	[INTERNAL_SETTINGS_SECTION,GET_BACK_DASH_ON_JUMP_DIS_PROF_KEY,false],
	[INTERNAL_SETTINGS_SECTION,GET_BACK_DASH_ON_JUMP_ADV_PROF_KEY,true],
	[INTERNAL_SETTINGS_SECTION,GET_BACK_DASH_ON_JUMP_NO_PROF_KEY,true],
	[INTERNAL_SETTINGS_SECTION,RECOVER_AIR_DASH_ON_HIT_DIS_PROF_KEY,false],
	[INTERNAL_SETTINGS_SECTION,RECOVER_AIR_DASH_ON_HIT_ADV_PROF_KEY,true],
	[INTERNAL_SETTINGS_SECTION,RECOVER_AIR_DASH_ON_HIT_NO_PROF_KEY,false],
	[INTERNAL_SETTINGS_SECTION,NUM_JUMPS_RECOVERED_FROM_ABILITY_CANCEL_DIS_PROF_KEY,0],
	[INTERNAL_SETTINGS_SECTION,NUM_JUMPS_RECOVERED_FROM_ABILITY_CANCEL_ADV_PROF_KEY,1],
	[INTERNAL_SETTINGS_SECTION,NUM_JUMPS_RECOVERED_FROM_ABILITY_CANCEL_NO_PROF_KEY,0],
	[INTERNAL_SETTINGS_SECTION,REGEN_GUARD_IN_AIR_DIS_PROF_KEY,false],
	[INTERNAL_SETTINGS_SECTION,REGEN_GUARD_IN_AIR_NO_PROF_KEY,false],
	[INTERNAL_SETTINGS_SECTION,REGEN_GUARD_IN_AIR_ADV_PROF_KEY,true],
	[INTERNAL_SETTINGS_SECTION,RECOVER_DASH_JUMP_FROM_AIR_BLOCK_DIS_PROF_KEY,false],
	[INTERNAL_SETTINGS_SECTION,RECOVER_DASH_JUMP_FROM_AIR_BLOCK_NO_PROF_KEY,true],
	[INTERNAL_SETTINGS_SECTION,RECOVER_DASH_JUMP_FROM_AIR_BLOCK_ADV_PROF_KEY,true],
	[INTERNAL_SETTINGS_SECTION,DAMAGE_GUAGE_ADDITIONAL_DAMAGE_PER_STAR_APROF_KEY,0.05],
	[INTERNAL_SETTINGS_SECTION,DAMAGE_GUAGE_ADDITIONAL_DAMAGE_PER_STAR_DPROF_KEY,-0.025],
	[INTERNAL_SETTINGS_SECTION,DAMAGE_GUAGE_ADDITIONAL_DAMAGE_PER_STAR_NOPROF_KEY,0],
	[INTERNAL_SETTINGS_SECTION,DAMAGE_PROF_GUARD_BLOCK_AMAGE_MOD_APROF_KEY,1.15],
	[INTERNAL_SETTINGS_SECTION,DAMAGE_PROF_GUARD_BLOCK_AMAGE_MOD_DPROF_KEY,0.85],
	[INTERNAL_SETTINGS_SECTION,DAMAGE_PROF_GUARD_BLOCK_AMAGE_MOD_NOPROF_KEY,1],
	[INTERNAL_SETTINGS_SECTION,AUTO_ABILITY_CANCEL_COST_APROF_KEY,0],#unused
	[INTERNAL_SETTINGS_SECTION,AUTO_ABILITY_CANCEL_COST_DPROF_KEY,4],#unused
	[INTERNAL_SETTINGS_SECTION,AUTO_ABILITY_CANCEL_COST_NOPROF_KEY,2],
	[PERSISTENT_USER_SETTINGS_SECTION,TRAIN_AI_FLAG_KEY,false]
	]
var keyUserFriendlyMap = {}

var ioErrorFlag = false

var config = null

func _ready():
	
	keyUserFriendlyMap[HP_KEY] = "Starting HP"
	keyUserFriendlyMap[MATCH_TIME_IN_MINUTES_KEY] = "Match time (min)"
	keyUserFriendlyMap[ABILITY_BAR_SIZE_MOD] = "Ability Bar Gained From Being Hit Modifier"
	keyUserFriendlyMap[DEFAULT_ABILITY_BAR_KEY] = "Default Ability Bar (Number of Chunks)"
	keyUserFriendlyMap[ABILITY_BAR_NUMBER_OF_CHUNKS_KEY] = "Ability Bar Size (in chunks)"
	keyUserFriendlyMap[BLOCK_COOLDOWN_DURATION_SECONDS_KEY] = "Block Cooldown (in seconds)"
	keyUserFriendlyMap[GRAB_COOLDOWN_DURATION_SECONDS_KEY] = "Grab Cooldown (in seconds)"
	#keyUserFriendlyMap[FAILED_TECH_ABILITY_BAR_COST_KEY] = "Tech Fail Ability Bar Cost (in chunks)"
	#keyUserFriendlyMap[TECH_ABILITY_BAR_COST_KEY] = "Tech Success Ability Bar Cost (in chunks)"
	keyUserFriendlyMap[HIGH_DAMAGE_THESHOLD_KEY] = "High Damage Rage Smoke Threshold"
	keyUserFriendlyMap[MAX_DAMAGE_GUAGE_KEY] = "Max Damage Guage"
	keyUserFriendlyMap[MAX_FOCUS_KEY] = "Max Focus"
	keyUserFriendlyMap[LOAD_GAME_IN_DIFFERENT_THREAD_KEY] = "Load game in different thread"
	keyUserFriendlyMap[SKIP_PROFICIENCY_SELECT_FLAG_KEY] = "Skip Proficiency Selection"
	keyUserFriendlyMap[SKIP_STAGE_SELECT_FLAG_KEY] = "Skip Stage Selection"
	keyUserFriendlyMap[SKIP_LOAD_SCREEN_DELAY_FLAG_KEY] = "Skip Loading Screen"
	
	#keyUserFriendlyMap[GLOBAL_SPEED_MOD_KEY] = "Game Speed"
	keyUserFriendlyMap[CREW_BATTLE_FLAG_KEY] = "Crew Battle"
	keyUserFriendlyMap[ENABLE_STYLE_POINTS_ROUND_KEY] = "Enable Style Points Round"
	keyUserFriendlyMap[LOSE_GUARD_HP_WHILE_MOVING_BACK_FLAG_KEY] = "Lose Guard HP While Walking Back"
	keyUserFriendlyMap[GAIN_BAR_ON_GUARD_BREAK_FLAG_KEY] = "Gain Ability Bar on Guard Break"
	keyUserFriendlyMap[BAR_GAIN_FROM_GUARD_BREAK_KEY] = "Bar Gained from Guard Break (in # Chunks)"
	keyUserFriendlyMap[TRAIN_AI_FLAG_KEY] = "Train AI"
	#keyUserFriendlyMap[FIXED_DELTA_FLAG_KEY] = "Fixed frame delta"
	
	keyUserFriendlyMap[ONLINE_MODE_HOST_PORT_FLAG_KEY] = "Online Mode Port"
	keyUserFriendlyMap[ONLINE_MODE_DEBUG_FLAG_KEY] = "Online Mode Debug"

	
#store settings onto disk
func saveSettings():
	
	#don't try to save settings if failed to open the file
	#if ioErrorFlag:
	#	print("cannot save settings file, failed to open settings")
	#	return
	if config == null:
		print("cannot save settings file, null config (did you forget to load the settings?)")
		return

	#reload the settings file, and only override the values from PERSISTENT_USER_SETTINGS_SECTION section
	#then save this file (other sections are read-only)
#	var file = File.new( )
	
#	if not file.file_exists(SETTINGS_FILE_PATH):
#		file.open(SETTINGS_FILE_PATH, File.WRITE)
		#create new empty settings file to write to
#		file.close()
		#just write default config file directly to dist, cause were not
		#ovreriding any read-only settings, since first file
#		config.save(SETTINGS_FILE_PATH)
#		print("setting file doesn't exist, creating new one")
#		return
	
	#print("setting file already exists, load it before overriding writable sections")
	
	
	#reload the settings file, and only override the values from PERSISTENT_USER_SETTINGS_SECTION section
	#then save this file (other sections are read-only)
	var newConfig = ConfigFile.new()
	#open the settings file
	var err = newConfig.load(SETTINGS_FILE_PATH)
	if err != OK: 
		print("failed to open the settings file during saving... cannot save, error code :" +str(err))
		return 
	
	#clear the old stale values 
	newConfig.erase_section(PERSISTENT_USER_SETTINGS_SECTION)
	
	#now repopulate with newest values to save
	for key in config.get_section_keys(PERSISTENT_USER_SETTINGS_SECTION):
		var value = config.get_value(PERSISTENT_USER_SETTINGS_SECTION,key)
		newConfig.set_value(PERSISTENT_USER_SETTINGS_SECTION,key,value)
	
	print("saving settings to :"+SETTINGS_FILE_PATH)
	# Save the changes by overwriting the previous file
	newConfig.save(SETTINGS_FILE_PATH)

#load settings from disk, or load default values upon failur to open file	
#failure to open the file means a new settings file will be created
#whcih will have all default values
func loadSettings():
	
	
	var file = File.new()
	config = ConfigFile.new()
	
	#is the settings file missing?
	if not file.file_exists(SETTINGS_FILE_PATH):
		
		config = createNewSettingsFiles()
		
		
	else: # settings file exists
	
		print("loading settings file "+SETTINGS_FILE_PATH)
		#open the settings file
		var err = config.load(SETTINGS_FILE_PATH)
		if err != OK: #something went wrong with the file loading?
			print("error loading settings file " + SETTINGS_FILE_PATH + ", error code "+str(err)+", will used default values and won't be able to save settings.")
			
			#load default values from a script into the config
			config = createDefaultConfiguration()

func createNewSettingsFiles():
	var file = File.new()
	config = ConfigFile.new()
	
	print("creating new file '"+SETTINGS_FILE_PATH+"'")
	#create a new default settings file
	file.open(SETTINGS_FILE_PATH, File.WRITE)
	
	#create new empty settings file to write to
	file.close()
	
	config = createDefaultConfiguration()
		
	#write all the ssettings to the new file
	config.save(SETTINGS_FILE_PATH)
	
	return config
func restoreDefaults():
	
	var file = File.new()
	#erase the settings file
	#is the settings file missing?
	if file.file_exists(SETTINGS_FILE_PATH):

		var dir = Directory.new()
		dir.remove(SETTINGS_FILE_PATH)
	
	loadSettings()
	

func createDefaultConfiguration():
	
	#create new config object
	var defaultConfig = ConfigFile.new()
		
	
	#iterate through all the default settings and fill the config
	for triple in DEFAULT_VALUE_MAP:
		var section = triple[SECTION_IX]
		var key = triple[KEY_IX]
		var value = triple[VALUE_IX]
		
		#add to config
		defaultConfig.set_value(section,key,value)
		
	return defaultConfig
func getValue(section,key):
	
	# TODO; add TYPE CHECKING, so if settings read and is not right format. create new file
	var res = null
	if config != null:
		res=config.get_value(section,key)
		
		
		if res == null:
			print("corrupt settings file")
			
			config = createNewSettingsFiles()
	else:
		print("missing settings file.")
			
		config = createNewSettingsFiles()
			
	return res
	
func setValue(section,key,value):
	
	if config == null:
		print("warning, trying to set value in settings will null config")
		return
	
	#disallow changing any internal settings (only upon loading game can be be change
	#via changing settings files)
	if section == INTERNAL_SETTINGS_SECTION:
		print("warning, cannot overwrite an internal setting")
		return
	if section !=PERSISTENT_USER_SETTINGS_SECTION and section != TEMP_USER_SETTINGS_SECTION:
		print("warning, cannot write to unsupported settings section: "+str(section))
		return
	
	config.set_value(section, key, value)
	
	# Look for the display/width pair, and default to 1024 if missing
	#var screen_width = config.get_value("display", "width", 1024)
	## Store a variable if and only if it hasn't been defined yet
	#f not config.has_section_key("audio", "mute"):
	#	config.set_value("audio", "mute", false)
		# Save the changes by overwriting the previous file
	#	config.save("user://settings.cfg")

func keyToUserFriendlyString(key):
	
	if keyUserFriendlyMap.has(key):
		return keyUserFriendlyMap[key]
	else:
		return key
	
#get all the entries of 
#PERSISTENT_USER_SETTINGS_SECTION  and TEMP_USER_SETTINGS_SECTION
#settings from config

func getUserChangeableSettingTriples():
	
	var res = []
	
	#iterate all sections in config
	for sec in config.get_sections():
		
		#only extract settings that can be chagned by user
		if (sec == PERSISTENT_USER_SETTINGS_SECTION) or  (sec== TEMP_USER_SETTINGS_SECTION):
			#iterae keys
			for key in config.get_section_keys(sec):
				var value = config.get_value(sec,key)
				
				#create the <section,key,value> triple
				var triple= []
				triple.append(sec)
				triple.append(key)
				triple.append(value)
				
				#add to result
				res.append(triple)
				
	return res
func toString():
	var res = ""
	if config == null:
		res = "null"
	else:
		res = "["
		#iterate all sections
		for sec in config.get_sections():	
			#iterae keys
			for key in config.get_section_keys(sec):
				var value = config.get_value(sec,key)
				res = res + "('"+str(sec)+"','"+str(key)+"': "+str(value)+")"
		
		res = res+ "]"		
	return res
	